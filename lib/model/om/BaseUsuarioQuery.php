<?php


/**
 * Base class that represents a query for the 'usuario' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Sun Jan 15 23:38:52 2017
 *
 * @method UsuarioQuery orderById($order = Criteria::ASC) Order by the id column
 * @method UsuarioQuery orderByUsuario($order = Criteria::ASC) Order by the usuario column
 * @method UsuarioQuery orderByClave($order = Criteria::ASC) Order by the clave column
 * @method UsuarioQuery orderByCorreo($order = Criteria::ASC) Order by the correo column
 * @method UsuarioQuery orderByEstado($order = Criteria::ASC) Order by the estado column
 * @method UsuarioQuery orderByImagen($order = Criteria::ASC) Order by the imagen column
 * @method UsuarioQuery orderByAdministrador($order = Criteria::ASC) Order by the administrador column
 * @method UsuarioQuery orderByValidado($order = Criteria::ASC) Order by the validado column
 * @method UsuarioQuery orderByUltimoIngreso($order = Criteria::ASC) Order by the ultimo_ingreso column
 * @method UsuarioQuery orderByTema($order = Criteria::ASC) Order by the tema column
 * @method UsuarioQuery orderByFrase($order = Criteria::ASC) Order by the frase column
 * @method UsuarioQuery orderByGenero($order = Criteria::ASC) Order by the genero column
 * @method UsuarioQuery orderByFechaNacimiento($order = Criteria::ASC) Order by the fecha_nacimiento column
 * @method UsuarioQuery orderByPaisId($order = Criteria::ASC) Order by the pais_id column
 * @method UsuarioQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method UsuarioQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method UsuarioQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method UsuarioQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method UsuarioQuery groupById() Group by the id column
 * @method UsuarioQuery groupByUsuario() Group by the usuario column
 * @method UsuarioQuery groupByClave() Group by the clave column
 * @method UsuarioQuery groupByCorreo() Group by the correo column
 * @method UsuarioQuery groupByEstado() Group by the estado column
 * @method UsuarioQuery groupByImagen() Group by the imagen column
 * @method UsuarioQuery groupByAdministrador() Group by the administrador column
 * @method UsuarioQuery groupByValidado() Group by the validado column
 * @method UsuarioQuery groupByUltimoIngreso() Group by the ultimo_ingreso column
 * @method UsuarioQuery groupByTema() Group by the tema column
 * @method UsuarioQuery groupByFrase() Group by the frase column
 * @method UsuarioQuery groupByGenero() Group by the genero column
 * @method UsuarioQuery groupByFechaNacimiento() Group by the fecha_nacimiento column
 * @method UsuarioQuery groupByPaisId() Group by the pais_id column
 * @method UsuarioQuery groupByCreatedAt() Group by the created_at column
 * @method UsuarioQuery groupByUpdatedAt() Group by the updated_at column
 * @method UsuarioQuery groupByCreatedBy() Group by the created_by column
 * @method UsuarioQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method UsuarioQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method UsuarioQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method UsuarioQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method UsuarioQuery leftJoinPais($relationAlias = null) Adds a LEFT JOIN clause to the query using the Pais relation
 * @method UsuarioQuery rightJoinPais($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Pais relation
 * @method UsuarioQuery innerJoinPais($relationAlias = null) Adds a INNER JOIN clause to the query using the Pais relation
 *
 * @method UsuarioQuery leftJoinMensajeCabeceraRelatedByUsuario1($relationAlias = null) Adds a LEFT JOIN clause to the query using the MensajeCabeceraRelatedByUsuario1 relation
 * @method UsuarioQuery rightJoinMensajeCabeceraRelatedByUsuario1($relationAlias = null) Adds a RIGHT JOIN clause to the query using the MensajeCabeceraRelatedByUsuario1 relation
 * @method UsuarioQuery innerJoinMensajeCabeceraRelatedByUsuario1($relationAlias = null) Adds a INNER JOIN clause to the query using the MensajeCabeceraRelatedByUsuario1 relation
 *
 * @method UsuarioQuery leftJoinMensajeCabeceraRelatedByUsuario2($relationAlias = null) Adds a LEFT JOIN clause to the query using the MensajeCabeceraRelatedByUsuario2 relation
 * @method UsuarioQuery rightJoinMensajeCabeceraRelatedByUsuario2($relationAlias = null) Adds a RIGHT JOIN clause to the query using the MensajeCabeceraRelatedByUsuario2 relation
 * @method UsuarioQuery innerJoinMensajeCabeceraRelatedByUsuario2($relationAlias = null) Adds a INNER JOIN clause to the query using the MensajeCabeceraRelatedByUsuario2 relation
 *
 * @method UsuarioQuery leftJoinMensajeRelatedByUsuarioEmisor($relationAlias = null) Adds a LEFT JOIN clause to the query using the MensajeRelatedByUsuarioEmisor relation
 * @method UsuarioQuery rightJoinMensajeRelatedByUsuarioEmisor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the MensajeRelatedByUsuarioEmisor relation
 * @method UsuarioQuery innerJoinMensajeRelatedByUsuarioEmisor($relationAlias = null) Adds a INNER JOIN clause to the query using the MensajeRelatedByUsuarioEmisor relation
 *
 * @method UsuarioQuery leftJoinMensajeRelatedByUsuarioReceptor($relationAlias = null) Adds a LEFT JOIN clause to the query using the MensajeRelatedByUsuarioReceptor relation
 * @method UsuarioQuery rightJoinMensajeRelatedByUsuarioReceptor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the MensajeRelatedByUsuarioReceptor relation
 * @method UsuarioQuery innerJoinMensajeRelatedByUsuarioReceptor($relationAlias = null) Adds a INNER JOIN clause to the query using the MensajeRelatedByUsuarioReceptor relation
 *
 * @method UsuarioQuery leftJoinTokenUsuario($relationAlias = null) Adds a LEFT JOIN clause to the query using the TokenUsuario relation
 * @method UsuarioQuery rightJoinTokenUsuario($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TokenUsuario relation
 * @method UsuarioQuery innerJoinTokenUsuario($relationAlias = null) Adds a INNER JOIN clause to the query using the TokenUsuario relation
 *
 * @method UsuarioQuery leftJoinArchivo($relationAlias = null) Adds a LEFT JOIN clause to the query using the Archivo relation
 * @method UsuarioQuery rightJoinArchivo($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Archivo relation
 * @method UsuarioQuery innerJoinArchivo($relationAlias = null) Adds a INNER JOIN clause to the query using the Archivo relation
 *
 * @method UsuarioQuery leftJoinArchivoComentario($relationAlias = null) Adds a LEFT JOIN clause to the query using the ArchivoComentario relation
 * @method UsuarioQuery rightJoinArchivoComentario($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ArchivoComentario relation
 * @method UsuarioQuery innerJoinArchivoComentario($relationAlias = null) Adds a INNER JOIN clause to the query using the ArchivoComentario relation
 *
 * @method Usuario findOne(PropelPDO $con = null) Return the first Usuario matching the query
 * @method Usuario findOneOrCreate(PropelPDO $con = null) Return the first Usuario matching the query, or a new Usuario object populated from the query conditions when no match is found
 *
 * @method Usuario findOneById(int $id) Return the first Usuario filtered by the id column
 * @method Usuario findOneByUsuario(string $usuario) Return the first Usuario filtered by the usuario column
 * @method Usuario findOneByClave(string $clave) Return the first Usuario filtered by the clave column
 * @method Usuario findOneByCorreo(string $correo) Return the first Usuario filtered by the correo column
 * @method Usuario findOneByEstado(string $estado) Return the first Usuario filtered by the estado column
 * @method Usuario findOneByImagen(string $imagen) Return the first Usuario filtered by the imagen column
 * @method Usuario findOneByAdministrador(boolean $administrador) Return the first Usuario filtered by the administrador column
 * @method Usuario findOneByValidado(boolean $validado) Return the first Usuario filtered by the validado column
 * @method Usuario findOneByUltimoIngreso(string $ultimo_ingreso) Return the first Usuario filtered by the ultimo_ingreso column
 * @method Usuario findOneByTema(string $tema) Return the first Usuario filtered by the tema column
 * @method Usuario findOneByFrase(string $frase) Return the first Usuario filtered by the frase column
 * @method Usuario findOneByGenero(string $genero) Return the first Usuario filtered by the genero column
 * @method Usuario findOneByFechaNacimiento(string $fecha_nacimiento) Return the first Usuario filtered by the fecha_nacimiento column
 * @method Usuario findOneByPaisId(int $pais_id) Return the first Usuario filtered by the pais_id column
 * @method Usuario findOneByCreatedAt(string $created_at) Return the first Usuario filtered by the created_at column
 * @method Usuario findOneByUpdatedAt(string $updated_at) Return the first Usuario filtered by the updated_at column
 * @method Usuario findOneByCreatedBy(string $created_by) Return the first Usuario filtered by the created_by column
 * @method Usuario findOneByUpdatedBy(string $updated_by) Return the first Usuario filtered by the updated_by column
 *
 * @method array findById(int $id) Return Usuario objects filtered by the id column
 * @method array findByUsuario(string $usuario) Return Usuario objects filtered by the usuario column
 * @method array findByClave(string $clave) Return Usuario objects filtered by the clave column
 * @method array findByCorreo(string $correo) Return Usuario objects filtered by the correo column
 * @method array findByEstado(string $estado) Return Usuario objects filtered by the estado column
 * @method array findByImagen(string $imagen) Return Usuario objects filtered by the imagen column
 * @method array findByAdministrador(boolean $administrador) Return Usuario objects filtered by the administrador column
 * @method array findByValidado(boolean $validado) Return Usuario objects filtered by the validado column
 * @method array findByUltimoIngreso(string $ultimo_ingreso) Return Usuario objects filtered by the ultimo_ingreso column
 * @method array findByTema(string $tema) Return Usuario objects filtered by the tema column
 * @method array findByFrase(string $frase) Return Usuario objects filtered by the frase column
 * @method array findByGenero(string $genero) Return Usuario objects filtered by the genero column
 * @method array findByFechaNacimiento(string $fecha_nacimiento) Return Usuario objects filtered by the fecha_nacimiento column
 * @method array findByPaisId(int $pais_id) Return Usuario objects filtered by the pais_id column
 * @method array findByCreatedAt(string $created_at) Return Usuario objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Usuario objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Usuario objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Usuario objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseUsuarioQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseUsuarioQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Usuario', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new UsuarioQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     UsuarioQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return UsuarioQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof UsuarioQuery) {
            return $criteria;
        }
        $query = new UsuarioQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Usuario|Usuario[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = UsuarioPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Usuario A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `USUARIO`, `CLAVE`, `CORREO`, `ESTADO`, `IMAGEN`, `ADMINISTRADOR`, `VALIDADO`, `ULTIMO_INGRESO`, `TEMA`, `FRASE`, `GENERO`, `FECHA_NACIMIENTO`, `PAIS_ID`, `CREATED_AT`, `UPDATED_AT`, `CREATED_BY`, `UPDATED_BY` FROM `usuario` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Usuario();
            $obj->hydrate($row);
            UsuarioPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Usuario|Usuario[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Usuario[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(UsuarioPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(UsuarioPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(UsuarioPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the usuario column
     *
     * Example usage:
     * <code>
     * $query->filterByUsuario('fooValue');   // WHERE usuario = 'fooValue'
     * $query->filterByUsuario('%fooValue%'); // WHERE usuario LIKE '%fooValue%'
     * </code>
     *
     * @param     string $usuario The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByUsuario($usuario = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($usuario)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $usuario)) {
                $usuario = str_replace('*', '%', $usuario);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::USUARIO, $usuario, $comparison);
    }

    /**
     * Filter the query on the clave column
     *
     * Example usage:
     * <code>
     * $query->filterByClave('fooValue');   // WHERE clave = 'fooValue'
     * $query->filterByClave('%fooValue%'); // WHERE clave LIKE '%fooValue%'
     * </code>
     *
     * @param     string $clave The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByClave($clave = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($clave)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $clave)) {
                $clave = str_replace('*', '%', $clave);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::CLAVE, $clave, $comparison);
    }

    /**
     * Filter the query on the correo column
     *
     * Example usage:
     * <code>
     * $query->filterByCorreo('fooValue');   // WHERE correo = 'fooValue'
     * $query->filterByCorreo('%fooValue%'); // WHERE correo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $correo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByCorreo($correo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($correo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $correo)) {
                $correo = str_replace('*', '%', $correo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::CORREO, $correo, $comparison);
    }

    /**
     * Filter the query on the estado column
     *
     * Example usage:
     * <code>
     * $query->filterByEstado('fooValue');   // WHERE estado = 'fooValue'
     * $query->filterByEstado('%fooValue%'); // WHERE estado LIKE '%fooValue%'
     * </code>
     *
     * @param     string $estado The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByEstado($estado = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($estado)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $estado)) {
                $estado = str_replace('*', '%', $estado);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::ESTADO, $estado, $comparison);
    }

    /**
     * Filter the query on the imagen column
     *
     * Example usage:
     * <code>
     * $query->filterByImagen('fooValue');   // WHERE imagen = 'fooValue'
     * $query->filterByImagen('%fooValue%'); // WHERE imagen LIKE '%fooValue%'
     * </code>
     *
     * @param     string $imagen The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByImagen($imagen = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($imagen)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $imagen)) {
                $imagen = str_replace('*', '%', $imagen);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::IMAGEN, $imagen, $comparison);
    }

    /**
     * Filter the query on the administrador column
     *
     * Example usage:
     * <code>
     * $query->filterByAdministrador(true); // WHERE administrador = true
     * $query->filterByAdministrador('yes'); // WHERE administrador = true
     * </code>
     *
     * @param     boolean|string $administrador The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByAdministrador($administrador = null, $comparison = null)
    {
        if (is_string($administrador)) {
            $administrador = in_array(strtolower($administrador), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(UsuarioPeer::ADMINISTRADOR, $administrador, $comparison);
    }

    /**
     * Filter the query on the validado column
     *
     * Example usage:
     * <code>
     * $query->filterByValidado(true); // WHERE validado = true
     * $query->filterByValidado('yes'); // WHERE validado = true
     * </code>
     *
     * @param     boolean|string $validado The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByValidado($validado = null, $comparison = null)
    {
        if (is_string($validado)) {
            $validado = in_array(strtolower($validado), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(UsuarioPeer::VALIDADO, $validado, $comparison);
    }

    /**
     * Filter the query on the ultimo_ingreso column
     *
     * Example usage:
     * <code>
     * $query->filterByUltimoIngreso('2011-03-14'); // WHERE ultimo_ingreso = '2011-03-14'
     * $query->filterByUltimoIngreso('now'); // WHERE ultimo_ingreso = '2011-03-14'
     * $query->filterByUltimoIngreso(array('max' => 'yesterday')); // WHERE ultimo_ingreso > '2011-03-13'
     * </code>
     *
     * @param     mixed $ultimoIngreso The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByUltimoIngreso($ultimoIngreso = null, $comparison = null)
    {
        if (is_array($ultimoIngreso)) {
            $useMinMax = false;
            if (isset($ultimoIngreso['min'])) {
                $this->addUsingAlias(UsuarioPeer::ULTIMO_INGRESO, $ultimoIngreso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($ultimoIngreso['max'])) {
                $this->addUsingAlias(UsuarioPeer::ULTIMO_INGRESO, $ultimoIngreso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::ULTIMO_INGRESO, $ultimoIngreso, $comparison);
    }

    /**
     * Filter the query on the tema column
     *
     * Example usage:
     * <code>
     * $query->filterByTema('fooValue');   // WHERE tema = 'fooValue'
     * $query->filterByTema('%fooValue%'); // WHERE tema LIKE '%fooValue%'
     * </code>
     *
     * @param     string $tema The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByTema($tema = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($tema)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $tema)) {
                $tema = str_replace('*', '%', $tema);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::TEMA, $tema, $comparison);
    }

    /**
     * Filter the query on the frase column
     *
     * Example usage:
     * <code>
     * $query->filterByFrase('fooValue');   // WHERE frase = 'fooValue'
     * $query->filterByFrase('%fooValue%'); // WHERE frase LIKE '%fooValue%'
     * </code>
     *
     * @param     string $frase The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByFrase($frase = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($frase)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $frase)) {
                $frase = str_replace('*', '%', $frase);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::FRASE, $frase, $comparison);
    }

    /**
     * Filter the query on the genero column
     *
     * Example usage:
     * <code>
     * $query->filterByGenero('fooValue');   // WHERE genero = 'fooValue'
     * $query->filterByGenero('%fooValue%'); // WHERE genero LIKE '%fooValue%'
     * </code>
     *
     * @param     string $genero The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByGenero($genero = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($genero)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $genero)) {
                $genero = str_replace('*', '%', $genero);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::GENERO, $genero, $comparison);
    }

    /**
     * Filter the query on the fecha_nacimiento column
     *
     * Example usage:
     * <code>
     * $query->filterByFechaNacimiento('2011-03-14'); // WHERE fecha_nacimiento = '2011-03-14'
     * $query->filterByFechaNacimiento('now'); // WHERE fecha_nacimiento = '2011-03-14'
     * $query->filterByFechaNacimiento(array('max' => 'yesterday')); // WHERE fecha_nacimiento > '2011-03-13'
     * </code>
     *
     * @param     mixed $fechaNacimiento The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByFechaNacimiento($fechaNacimiento = null, $comparison = null)
    {
        if (is_array($fechaNacimiento)) {
            $useMinMax = false;
            if (isset($fechaNacimiento['min'])) {
                $this->addUsingAlias(UsuarioPeer::FECHA_NACIMIENTO, $fechaNacimiento['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($fechaNacimiento['max'])) {
                $this->addUsingAlias(UsuarioPeer::FECHA_NACIMIENTO, $fechaNacimiento['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::FECHA_NACIMIENTO, $fechaNacimiento, $comparison);
    }

    /**
     * Filter the query on the pais_id column
     *
     * Example usage:
     * <code>
     * $query->filterByPaisId(1234); // WHERE pais_id = 1234
     * $query->filterByPaisId(array(12, 34)); // WHERE pais_id IN (12, 34)
     * $query->filterByPaisId(array('min' => 12)); // WHERE pais_id > 12
     * </code>
     *
     * @see       filterByPais()
     *
     * @param     mixed $paisId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByPaisId($paisId = null, $comparison = null)
    {
        if (is_array($paisId)) {
            $useMinMax = false;
            if (isset($paisId['min'])) {
                $this->addUsingAlias(UsuarioPeer::PAIS_ID, $paisId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($paisId['max'])) {
                $this->addUsingAlias(UsuarioPeer::PAIS_ID, $paisId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::PAIS_ID, $paisId, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(UsuarioPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(UsuarioPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(UsuarioPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(UsuarioPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Pais object
     *
     * @param   Pais|PropelObjectCollection $pais The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   UsuarioQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPais($pais, $comparison = null)
    {
        if ($pais instanceof Pais) {
            return $this
                ->addUsingAlias(UsuarioPeer::PAIS_ID, $pais->getId(), $comparison);
        } elseif ($pais instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(UsuarioPeer::PAIS_ID, $pais->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByPais() only accepts arguments of type Pais or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Pais relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function joinPais($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Pais');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Pais');
        }

        return $this;
    }

    /**
     * Use the Pais relation Pais object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PaisQuery A secondary query class using the current class as primary query
     */
    public function usePaisQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinPais($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Pais', 'PaisQuery');
    }

    /**
     * Filter the query by a related MensajeCabecera object
     *
     * @param   MensajeCabecera|PropelObjectCollection $mensajeCabecera  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   UsuarioQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByMensajeCabeceraRelatedByUsuario1($mensajeCabecera, $comparison = null)
    {
        if ($mensajeCabecera instanceof MensajeCabecera) {
            return $this
                ->addUsingAlias(UsuarioPeer::ID, $mensajeCabecera->getUsuario1(), $comparison);
        } elseif ($mensajeCabecera instanceof PropelObjectCollection) {
            return $this
                ->useMensajeCabeceraRelatedByUsuario1Query()
                ->filterByPrimaryKeys($mensajeCabecera->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByMensajeCabeceraRelatedByUsuario1() only accepts arguments of type MensajeCabecera or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the MensajeCabeceraRelatedByUsuario1 relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function joinMensajeCabeceraRelatedByUsuario1($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('MensajeCabeceraRelatedByUsuario1');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'MensajeCabeceraRelatedByUsuario1');
        }

        return $this;
    }

    /**
     * Use the MensajeCabeceraRelatedByUsuario1 relation MensajeCabecera object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   MensajeCabeceraQuery A secondary query class using the current class as primary query
     */
    public function useMensajeCabeceraRelatedByUsuario1Query($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinMensajeCabeceraRelatedByUsuario1($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'MensajeCabeceraRelatedByUsuario1', 'MensajeCabeceraQuery');
    }

    /**
     * Filter the query by a related MensajeCabecera object
     *
     * @param   MensajeCabecera|PropelObjectCollection $mensajeCabecera  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   UsuarioQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByMensajeCabeceraRelatedByUsuario2($mensajeCabecera, $comparison = null)
    {
        if ($mensajeCabecera instanceof MensajeCabecera) {
            return $this
                ->addUsingAlias(UsuarioPeer::ID, $mensajeCabecera->getUsuario2(), $comparison);
        } elseif ($mensajeCabecera instanceof PropelObjectCollection) {
            return $this
                ->useMensajeCabeceraRelatedByUsuario2Query()
                ->filterByPrimaryKeys($mensajeCabecera->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByMensajeCabeceraRelatedByUsuario2() only accepts arguments of type MensajeCabecera or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the MensajeCabeceraRelatedByUsuario2 relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function joinMensajeCabeceraRelatedByUsuario2($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('MensajeCabeceraRelatedByUsuario2');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'MensajeCabeceraRelatedByUsuario2');
        }

        return $this;
    }

    /**
     * Use the MensajeCabeceraRelatedByUsuario2 relation MensajeCabecera object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   MensajeCabeceraQuery A secondary query class using the current class as primary query
     */
    public function useMensajeCabeceraRelatedByUsuario2Query($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinMensajeCabeceraRelatedByUsuario2($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'MensajeCabeceraRelatedByUsuario2', 'MensajeCabeceraQuery');
    }

    /**
     * Filter the query by a related Mensaje object
     *
     * @param   Mensaje|PropelObjectCollection $mensaje  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   UsuarioQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByMensajeRelatedByUsuarioEmisor($mensaje, $comparison = null)
    {
        if ($mensaje instanceof Mensaje) {
            return $this
                ->addUsingAlias(UsuarioPeer::ID, $mensaje->getUsuarioEmisor(), $comparison);
        } elseif ($mensaje instanceof PropelObjectCollection) {
            return $this
                ->useMensajeRelatedByUsuarioEmisorQuery()
                ->filterByPrimaryKeys($mensaje->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByMensajeRelatedByUsuarioEmisor() only accepts arguments of type Mensaje or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the MensajeRelatedByUsuarioEmisor relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function joinMensajeRelatedByUsuarioEmisor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('MensajeRelatedByUsuarioEmisor');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'MensajeRelatedByUsuarioEmisor');
        }

        return $this;
    }

    /**
     * Use the MensajeRelatedByUsuarioEmisor relation Mensaje object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   MensajeQuery A secondary query class using the current class as primary query
     */
    public function useMensajeRelatedByUsuarioEmisorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinMensajeRelatedByUsuarioEmisor($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'MensajeRelatedByUsuarioEmisor', 'MensajeQuery');
    }

    /**
     * Filter the query by a related Mensaje object
     *
     * @param   Mensaje|PropelObjectCollection $mensaje  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   UsuarioQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByMensajeRelatedByUsuarioReceptor($mensaje, $comparison = null)
    {
        if ($mensaje instanceof Mensaje) {
            return $this
                ->addUsingAlias(UsuarioPeer::ID, $mensaje->getUsuarioReceptor(), $comparison);
        } elseif ($mensaje instanceof PropelObjectCollection) {
            return $this
                ->useMensajeRelatedByUsuarioReceptorQuery()
                ->filterByPrimaryKeys($mensaje->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByMensajeRelatedByUsuarioReceptor() only accepts arguments of type Mensaje or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the MensajeRelatedByUsuarioReceptor relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function joinMensajeRelatedByUsuarioReceptor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('MensajeRelatedByUsuarioReceptor');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'MensajeRelatedByUsuarioReceptor');
        }

        return $this;
    }

    /**
     * Use the MensajeRelatedByUsuarioReceptor relation Mensaje object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   MensajeQuery A secondary query class using the current class as primary query
     */
    public function useMensajeRelatedByUsuarioReceptorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinMensajeRelatedByUsuarioReceptor($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'MensajeRelatedByUsuarioReceptor', 'MensajeQuery');
    }

    /**
     * Filter the query by a related TokenUsuario object
     *
     * @param   TokenUsuario|PropelObjectCollection $tokenUsuario  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   UsuarioQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTokenUsuario($tokenUsuario, $comparison = null)
    {
        if ($tokenUsuario instanceof TokenUsuario) {
            return $this
                ->addUsingAlias(UsuarioPeer::ID, $tokenUsuario->getUsuarioId(), $comparison);
        } elseif ($tokenUsuario instanceof PropelObjectCollection) {
            return $this
                ->useTokenUsuarioQuery()
                ->filterByPrimaryKeys($tokenUsuario->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTokenUsuario() only accepts arguments of type TokenUsuario or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TokenUsuario relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function joinTokenUsuario($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TokenUsuario');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TokenUsuario');
        }

        return $this;
    }

    /**
     * Use the TokenUsuario relation TokenUsuario object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TokenUsuarioQuery A secondary query class using the current class as primary query
     */
    public function useTokenUsuarioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTokenUsuario($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TokenUsuario', 'TokenUsuarioQuery');
    }

    /**
     * Filter the query by a related Archivo object
     *
     * @param   Archivo|PropelObjectCollection $archivo  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   UsuarioQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByArchivo($archivo, $comparison = null)
    {
        if ($archivo instanceof Archivo) {
            return $this
                ->addUsingAlias(UsuarioPeer::ID, $archivo->getUsuarioId(), $comparison);
        } elseif ($archivo instanceof PropelObjectCollection) {
            return $this
                ->useArchivoQuery()
                ->filterByPrimaryKeys($archivo->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByArchivo() only accepts arguments of type Archivo or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Archivo relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function joinArchivo($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Archivo');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Archivo');
        }

        return $this;
    }

    /**
     * Use the Archivo relation Archivo object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   ArchivoQuery A secondary query class using the current class as primary query
     */
    public function useArchivoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinArchivo($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Archivo', 'ArchivoQuery');
    }

    /**
     * Filter the query by a related ArchivoComentario object
     *
     * @param   ArchivoComentario|PropelObjectCollection $archivoComentario  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   UsuarioQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByArchivoComentario($archivoComentario, $comparison = null)
    {
        if ($archivoComentario instanceof ArchivoComentario) {
            return $this
                ->addUsingAlias(UsuarioPeer::ID, $archivoComentario->getUsuarioId(), $comparison);
        } elseif ($archivoComentario instanceof PropelObjectCollection) {
            return $this
                ->useArchivoComentarioQuery()
                ->filterByPrimaryKeys($archivoComentario->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByArchivoComentario() only accepts arguments of type ArchivoComentario or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the ArchivoComentario relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function joinArchivoComentario($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('ArchivoComentario');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'ArchivoComentario');
        }

        return $this;
    }

    /**
     * Use the ArchivoComentario relation ArchivoComentario object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   ArchivoComentarioQuery A secondary query class using the current class as primary query
     */
    public function useArchivoComentarioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinArchivoComentario($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'ArchivoComentario', 'ArchivoComentarioQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Usuario $usuario Object to remove from the list of results
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function prune($usuario = null)
    {
        if ($usuario) {
            $this->addUsingAlias(UsuarioPeer::ID, $usuario->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
