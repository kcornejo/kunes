<?php


/**
 * Base class that represents a row from the 'usuario' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Sun Jan 15 23:38:52 2017
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseUsuario extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'UsuarioPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        UsuarioPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the usuario field.
     * @var        string
     */
    protected $usuario;

    /**
     * The value for the clave field.
     * @var        string
     */
    protected $clave;

    /**
     * The value for the correo field.
     * @var        string
     */
    protected $correo;

    /**
     * The value for the estado field.
     * @var        string
     */
    protected $estado;

    /**
     * The value for the imagen field.
     * @var        string
     */
    protected $imagen;

    /**
     * The value for the administrador field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $administrador;

    /**
     * The value for the validado field.
     * Note: this column has a database default value of: true
     * @var        boolean
     */
    protected $validado;

    /**
     * The value for the ultimo_ingreso field.
     * @var        string
     */
    protected $ultimo_ingreso;

    /**
     * The value for the tema field.
     * @var        string
     */
    protected $tema;

    /**
     * The value for the frase field.
     * @var        string
     */
    protected $frase;

    /**
     * The value for the genero field.
     * @var        string
     */
    protected $genero;

    /**
     * The value for the fecha_nacimiento field.
     * @var        string
     */
    protected $fecha_nacimiento;

    /**
     * The value for the pais_id field.
     * @var        int
     */
    protected $pais_id;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * The value for the created_by field.
     * @var        string
     */
    protected $created_by;

    /**
     * The value for the updated_by field.
     * @var        string
     */
    protected $updated_by;

    /**
     * @var        Pais
     */
    protected $aPais;

    /**
     * @var        PropelObjectCollection|MensajeCabecera[] Collection to store aggregation of MensajeCabecera objects.
     */
    protected $collMensajeCabecerasRelatedByUsuario1;
    protected $collMensajeCabecerasRelatedByUsuario1Partial;

    /**
     * @var        PropelObjectCollection|MensajeCabecera[] Collection to store aggregation of MensajeCabecera objects.
     */
    protected $collMensajeCabecerasRelatedByUsuario2;
    protected $collMensajeCabecerasRelatedByUsuario2Partial;

    /**
     * @var        PropelObjectCollection|Mensaje[] Collection to store aggregation of Mensaje objects.
     */
    protected $collMensajesRelatedByUsuarioEmisor;
    protected $collMensajesRelatedByUsuarioEmisorPartial;

    /**
     * @var        PropelObjectCollection|Mensaje[] Collection to store aggregation of Mensaje objects.
     */
    protected $collMensajesRelatedByUsuarioReceptor;
    protected $collMensajesRelatedByUsuarioReceptorPartial;

    /**
     * @var        PropelObjectCollection|TokenUsuario[] Collection to store aggregation of TokenUsuario objects.
     */
    protected $collTokenUsuarios;
    protected $collTokenUsuariosPartial;

    /**
     * @var        PropelObjectCollection|Archivo[] Collection to store aggregation of Archivo objects.
     */
    protected $collArchivos;
    protected $collArchivosPartial;

    /**
     * @var        PropelObjectCollection|ArchivoComentario[] Collection to store aggregation of ArchivoComentario objects.
     */
    protected $collArchivoComentarios;
    protected $collArchivoComentariosPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $mensajeCabecerasRelatedByUsuario1ScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $mensajeCabecerasRelatedByUsuario2ScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $mensajesRelatedByUsuarioEmisorScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $mensajesRelatedByUsuarioReceptorScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $tokenUsuariosScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $archivosScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $archivoComentariosScheduledForDeletion = null;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->administrador = false;
        $this->validado = true;
    }

    /**
     * Initializes internal state of BaseUsuario object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [usuario] column value.
     *
     * @return string
     */
    public function getUsuario()
    {
        return $this->usuario;
    }

    /**
     * Get the [clave] column value.
     *
     * @return string
     */
    public function getClave()
    {
        return $this->clave;
    }

    /**
     * Get the [correo] column value.
     *
     * @return string
     */
    public function getCorreo()
    {
        return $this->correo;
    }

    /**
     * Get the [estado] column value.
     *
     * @return string
     */
    public function getEstado()
    {
        return $this->estado;
    }

    /**
     * Get the [imagen] column value.
     *
     * @return string
     */
    public function getImagen()
    {
        return $this->imagen;
    }

    /**
     * Get the [administrador] column value.
     *
     * @return boolean
     */
    public function getAdministrador()
    {
        return $this->administrador;
    }

    /**
     * Get the [validado] column value.
     *
     * @return boolean
     */
    public function getValidado()
    {
        return $this->validado;
    }

    /**
     * Get the [optionally formatted] temporal [ultimo_ingreso] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUltimoIngreso($format = 'Y-m-d')
    {
        if ($this->ultimo_ingreso === null) {
            return null;
        }

        if ($this->ultimo_ingreso === '0000-00-00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->ultimo_ingreso);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->ultimo_ingreso, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [tema] column value.
     *
     * @return string
     */
    public function getTema()
    {
        return $this->tema;
    }

    /**
     * Get the [frase] column value.
     *
     * @return string
     */
    public function getFrase()
    {
        return $this->frase;
    }

    /**
     * Get the [genero] column value.
     *
     * @return string
     */
    public function getGenero()
    {
        return $this->genero;
    }

    /**
     * Get the [optionally formatted] temporal [fecha_nacimiento] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getFechaNacimiento($format = 'Y-m-d')
    {
        if ($this->fecha_nacimiento === null) {
            return null;
        }

        if ($this->fecha_nacimiento === '0000-00-00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->fecha_nacimiento);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_nacimiento, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [pais_id] column value.
     *
     * @return int
     */
    public function getPaisId()
    {
        return $this->pais_id;
    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }

        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->created_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [updated_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->updated_at === null) {
            return null;
        }

        if ($this->updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->updated_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [created_by] column value.
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->created_by;
    }

    /**
     * Get the [updated_by] column value.
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->updated_by;
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = UsuarioPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [usuario] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setUsuario($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->usuario !== $v) {
            $this->usuario = $v;
            $this->modifiedColumns[] = UsuarioPeer::USUARIO;
        }


        return $this;
    } // setUsuario()

    /**
     * Set the value of [clave] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setClave($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->clave !== $v) {
            $this->clave = $v;
            $this->modifiedColumns[] = UsuarioPeer::CLAVE;
        }


        return $this;
    } // setClave()

    /**
     * Set the value of [correo] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setCorreo($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->correo !== $v) {
            $this->correo = $v;
            $this->modifiedColumns[] = UsuarioPeer::CORREO;
        }


        return $this;
    } // setCorreo()

    /**
     * Set the value of [estado] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setEstado($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->estado !== $v) {
            $this->estado = $v;
            $this->modifiedColumns[] = UsuarioPeer::ESTADO;
        }


        return $this;
    } // setEstado()

    /**
     * Set the value of [imagen] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setImagen($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->imagen !== $v) {
            $this->imagen = $v;
            $this->modifiedColumns[] = UsuarioPeer::IMAGEN;
        }


        return $this;
    } // setImagen()

    /**
     * Sets the value of the [administrador] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setAdministrador($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->administrador !== $v) {
            $this->administrador = $v;
            $this->modifiedColumns[] = UsuarioPeer::ADMINISTRADOR;
        }


        return $this;
    } // setAdministrador()

    /**
     * Sets the value of the [validado] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setValidado($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->validado !== $v) {
            $this->validado = $v;
            $this->modifiedColumns[] = UsuarioPeer::VALIDADO;
        }


        return $this;
    } // setValidado()

    /**
     * Sets the value of [ultimo_ingreso] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Usuario The current object (for fluent API support)
     */
    public function setUltimoIngreso($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->ultimo_ingreso !== null || $dt !== null) {
            $currentDateAsString = ($this->ultimo_ingreso !== null && $tmpDt = new DateTime($this->ultimo_ingreso)) ? $tmpDt->format('Y-m-d') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->ultimo_ingreso = $newDateAsString;
                $this->modifiedColumns[] = UsuarioPeer::ULTIMO_INGRESO;
            }
        } // if either are not null


        return $this;
    } // setUltimoIngreso()

    /**
     * Set the value of [tema] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setTema($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->tema !== $v) {
            $this->tema = $v;
            $this->modifiedColumns[] = UsuarioPeer::TEMA;
        }


        return $this;
    } // setTema()

    /**
     * Set the value of [frase] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setFrase($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->frase !== $v) {
            $this->frase = $v;
            $this->modifiedColumns[] = UsuarioPeer::FRASE;
        }


        return $this;
    } // setFrase()

    /**
     * Set the value of [genero] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setGenero($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->genero !== $v) {
            $this->genero = $v;
            $this->modifiedColumns[] = UsuarioPeer::GENERO;
        }


        return $this;
    } // setGenero()

    /**
     * Sets the value of [fecha_nacimiento] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Usuario The current object (for fluent API support)
     */
    public function setFechaNacimiento($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->fecha_nacimiento !== null || $dt !== null) {
            $currentDateAsString = ($this->fecha_nacimiento !== null && $tmpDt = new DateTime($this->fecha_nacimiento)) ? $tmpDt->format('Y-m-d') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->fecha_nacimiento = $newDateAsString;
                $this->modifiedColumns[] = UsuarioPeer::FECHA_NACIMIENTO;
            }
        } // if either are not null


        return $this;
    } // setFechaNacimiento()

    /**
     * Set the value of [pais_id] column.
     *
     * @param int $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setPaisId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->pais_id !== $v) {
            $this->pais_id = $v;
            $this->modifiedColumns[] = UsuarioPeer::PAIS_ID;
        }

        if ($this->aPais !== null && $this->aPais->getId() !== $v) {
            $this->aPais = null;
        }


        return $this;
    } // setPaisId()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Usuario The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = UsuarioPeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Usuario The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->updated_at = $newDateAsString;
                $this->modifiedColumns[] = UsuarioPeer::UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setUpdatedAt()

    /**
     * Set the value of [created_by] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setCreatedBy($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->created_by !== $v) {
            $this->created_by = $v;
            $this->modifiedColumns[] = UsuarioPeer::CREATED_BY;
        }


        return $this;
    } // setCreatedBy()

    /**
     * Set the value of [updated_by] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setUpdatedBy($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->updated_by !== $v) {
            $this->updated_by = $v;
            $this->modifiedColumns[] = UsuarioPeer::UPDATED_BY;
        }


        return $this;
    } // setUpdatedBy()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->administrador !== false) {
                return false;
            }

            if ($this->validado !== true) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->usuario = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->clave = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->correo = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->estado = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->imagen = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->administrador = ($row[$startcol + 6] !== null) ? (boolean) $row[$startcol + 6] : null;
            $this->validado = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
            $this->ultimo_ingreso = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
            $this->tema = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
            $this->frase = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
            $this->genero = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
            $this->fecha_nacimiento = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
            $this->pais_id = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
            $this->created_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->updated_at = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
            $this->created_by = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
            $this->updated_by = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 18; // 18 = UsuarioPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Usuario object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->aPais !== null && $this->pais_id !== $this->aPais->getId()) {
            $this->aPais = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = UsuarioPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->aPais = null;
            $this->collMensajeCabecerasRelatedByUsuario1 = null;

            $this->collMensajeCabecerasRelatedByUsuario2 = null;

            $this->collMensajesRelatedByUsuarioEmisor = null;

            $this->collMensajesRelatedByUsuarioReceptor = null;

            $this->collTokenUsuarios = null;

            $this->collArchivos = null;

            $this->collArchivoComentarios = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = UsuarioQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseUsuario:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseUsuario:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseUsuario:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            // symfony_timestampable behavior
            if ($this->isModified() && !$this->isColumnModified(UsuarioPeer::UPDATED_AT))
            {
                $this->setUpdatedAt(time());
            }
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // symfony_timestampable behavior
                if (!$this->isColumnModified(UsuarioPeer::CREATED_AT))
                {
                  $this->setCreatedAt(time());
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseUsuario:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                UsuarioPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aPais !== null) {
                if ($this->aPais->isModified() || $this->aPais->isNew()) {
                    $affectedRows += $this->aPais->save($con);
                }
                $this->setPais($this->aPais);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->mensajeCabecerasRelatedByUsuario1ScheduledForDeletion !== null) {
                if (!$this->mensajeCabecerasRelatedByUsuario1ScheduledForDeletion->isEmpty()) {
                    foreach ($this->mensajeCabecerasRelatedByUsuario1ScheduledForDeletion as $mensajeCabeceraRelatedByUsuario1) {
                        // need to save related object because we set the relation to null
                        $mensajeCabeceraRelatedByUsuario1->save($con);
                    }
                    $this->mensajeCabecerasRelatedByUsuario1ScheduledForDeletion = null;
                }
            }

            if ($this->collMensajeCabecerasRelatedByUsuario1 !== null) {
                foreach ($this->collMensajeCabecerasRelatedByUsuario1 as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->mensajeCabecerasRelatedByUsuario2ScheduledForDeletion !== null) {
                if (!$this->mensajeCabecerasRelatedByUsuario2ScheduledForDeletion->isEmpty()) {
                    foreach ($this->mensajeCabecerasRelatedByUsuario2ScheduledForDeletion as $mensajeCabeceraRelatedByUsuario2) {
                        // need to save related object because we set the relation to null
                        $mensajeCabeceraRelatedByUsuario2->save($con);
                    }
                    $this->mensajeCabecerasRelatedByUsuario2ScheduledForDeletion = null;
                }
            }

            if ($this->collMensajeCabecerasRelatedByUsuario2 !== null) {
                foreach ($this->collMensajeCabecerasRelatedByUsuario2 as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->mensajesRelatedByUsuarioEmisorScheduledForDeletion !== null) {
                if (!$this->mensajesRelatedByUsuarioEmisorScheduledForDeletion->isEmpty()) {
                    foreach ($this->mensajesRelatedByUsuarioEmisorScheduledForDeletion as $mensajeRelatedByUsuarioEmisor) {
                        // need to save related object because we set the relation to null
                        $mensajeRelatedByUsuarioEmisor->save($con);
                    }
                    $this->mensajesRelatedByUsuarioEmisorScheduledForDeletion = null;
                }
            }

            if ($this->collMensajesRelatedByUsuarioEmisor !== null) {
                foreach ($this->collMensajesRelatedByUsuarioEmisor as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->mensajesRelatedByUsuarioReceptorScheduledForDeletion !== null) {
                if (!$this->mensajesRelatedByUsuarioReceptorScheduledForDeletion->isEmpty()) {
                    foreach ($this->mensajesRelatedByUsuarioReceptorScheduledForDeletion as $mensajeRelatedByUsuarioReceptor) {
                        // need to save related object because we set the relation to null
                        $mensajeRelatedByUsuarioReceptor->save($con);
                    }
                    $this->mensajesRelatedByUsuarioReceptorScheduledForDeletion = null;
                }
            }

            if ($this->collMensajesRelatedByUsuarioReceptor !== null) {
                foreach ($this->collMensajesRelatedByUsuarioReceptor as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->tokenUsuariosScheduledForDeletion !== null) {
                if (!$this->tokenUsuariosScheduledForDeletion->isEmpty()) {
                    foreach ($this->tokenUsuariosScheduledForDeletion as $tokenUsuario) {
                        // need to save related object because we set the relation to null
                        $tokenUsuario->save($con);
                    }
                    $this->tokenUsuariosScheduledForDeletion = null;
                }
            }

            if ($this->collTokenUsuarios !== null) {
                foreach ($this->collTokenUsuarios as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->archivosScheduledForDeletion !== null) {
                if (!$this->archivosScheduledForDeletion->isEmpty()) {
                    foreach ($this->archivosScheduledForDeletion as $archivo) {
                        // need to save related object because we set the relation to null
                        $archivo->save($con);
                    }
                    $this->archivosScheduledForDeletion = null;
                }
            }

            if ($this->collArchivos !== null) {
                foreach ($this->collArchivos as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->archivoComentariosScheduledForDeletion !== null) {
                if (!$this->archivoComentariosScheduledForDeletion->isEmpty()) {
                    foreach ($this->archivoComentariosScheduledForDeletion as $archivoComentario) {
                        // need to save related object because we set the relation to null
                        $archivoComentario->save($con);
                    }
                    $this->archivoComentariosScheduledForDeletion = null;
                }
            }

            if ($this->collArchivoComentarios !== null) {
                foreach ($this->collArchivoComentarios as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = UsuarioPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . UsuarioPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(UsuarioPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(UsuarioPeer::USUARIO)) {
            $modifiedColumns[':p' . $index++]  = '`USUARIO`';
        }
        if ($this->isColumnModified(UsuarioPeer::CLAVE)) {
            $modifiedColumns[':p' . $index++]  = '`CLAVE`';
        }
        if ($this->isColumnModified(UsuarioPeer::CORREO)) {
            $modifiedColumns[':p' . $index++]  = '`CORREO`';
        }
        if ($this->isColumnModified(UsuarioPeer::ESTADO)) {
            $modifiedColumns[':p' . $index++]  = '`ESTADO`';
        }
        if ($this->isColumnModified(UsuarioPeer::IMAGEN)) {
            $modifiedColumns[':p' . $index++]  = '`IMAGEN`';
        }
        if ($this->isColumnModified(UsuarioPeer::ADMINISTRADOR)) {
            $modifiedColumns[':p' . $index++]  = '`ADMINISTRADOR`';
        }
        if ($this->isColumnModified(UsuarioPeer::VALIDADO)) {
            $modifiedColumns[':p' . $index++]  = '`VALIDADO`';
        }
        if ($this->isColumnModified(UsuarioPeer::ULTIMO_INGRESO)) {
            $modifiedColumns[':p' . $index++]  = '`ULTIMO_INGRESO`';
        }
        if ($this->isColumnModified(UsuarioPeer::TEMA)) {
            $modifiedColumns[':p' . $index++]  = '`TEMA`';
        }
        if ($this->isColumnModified(UsuarioPeer::FRASE)) {
            $modifiedColumns[':p' . $index++]  = '`FRASE`';
        }
        if ($this->isColumnModified(UsuarioPeer::GENERO)) {
            $modifiedColumns[':p' . $index++]  = '`GENERO`';
        }
        if ($this->isColumnModified(UsuarioPeer::FECHA_NACIMIENTO)) {
            $modifiedColumns[':p' . $index++]  = '`FECHA_NACIMIENTO`';
        }
        if ($this->isColumnModified(UsuarioPeer::PAIS_ID)) {
            $modifiedColumns[':p' . $index++]  = '`PAIS_ID`';
        }
        if ($this->isColumnModified(UsuarioPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_AT`';
        }
        if ($this->isColumnModified(UsuarioPeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_AT`';
        }
        if ($this->isColumnModified(UsuarioPeer::CREATED_BY)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_BY`';
        }
        if ($this->isColumnModified(UsuarioPeer::UPDATED_BY)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_BY`';
        }

        $sql = sprintf(
            'INSERT INTO `usuario` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`USUARIO`':
                        $stmt->bindValue($identifier, $this->usuario, PDO::PARAM_STR);
                        break;
                    case '`CLAVE`':
                        $stmt->bindValue($identifier, $this->clave, PDO::PARAM_STR);
                        break;
                    case '`CORREO`':
                        $stmt->bindValue($identifier, $this->correo, PDO::PARAM_STR);
                        break;
                    case '`ESTADO`':
                        $stmt->bindValue($identifier, $this->estado, PDO::PARAM_STR);
                        break;
                    case '`IMAGEN`':
                        $stmt->bindValue($identifier, $this->imagen, PDO::PARAM_STR);
                        break;
                    case '`ADMINISTRADOR`':
                        $stmt->bindValue($identifier, (int) $this->administrador, PDO::PARAM_INT);
                        break;
                    case '`VALIDADO`':
                        $stmt->bindValue($identifier, (int) $this->validado, PDO::PARAM_INT);
                        break;
                    case '`ULTIMO_INGRESO`':
                        $stmt->bindValue($identifier, $this->ultimo_ingreso, PDO::PARAM_STR);
                        break;
                    case '`TEMA`':
                        $stmt->bindValue($identifier, $this->tema, PDO::PARAM_STR);
                        break;
                    case '`FRASE`':
                        $stmt->bindValue($identifier, $this->frase, PDO::PARAM_STR);
                        break;
                    case '`GENERO`':
                        $stmt->bindValue($identifier, $this->genero, PDO::PARAM_STR);
                        break;
                    case '`FECHA_NACIMIENTO`':
                        $stmt->bindValue($identifier, $this->fecha_nacimiento, PDO::PARAM_STR);
                        break;
                    case '`PAIS_ID`':
                        $stmt->bindValue($identifier, $this->pais_id, PDO::PARAM_INT);
                        break;
                    case '`CREATED_AT`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_AT`':
                        $stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                    case '`CREATED_BY`':
                        $stmt->bindValue($identifier, $this->created_by, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_BY`':
                        $stmt->bindValue($identifier, $this->updated_by, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aPais !== null) {
                if (!$this->aPais->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aPais->getValidationFailures());
                }
            }


            if (($retval = UsuarioPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collMensajeCabecerasRelatedByUsuario1 !== null) {
                    foreach ($this->collMensajeCabecerasRelatedByUsuario1 as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collMensajeCabecerasRelatedByUsuario2 !== null) {
                    foreach ($this->collMensajeCabecerasRelatedByUsuario2 as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collMensajesRelatedByUsuarioEmisor !== null) {
                    foreach ($this->collMensajesRelatedByUsuarioEmisor as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collMensajesRelatedByUsuarioReceptor !== null) {
                    foreach ($this->collMensajesRelatedByUsuarioReceptor as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collTokenUsuarios !== null) {
                    foreach ($this->collTokenUsuarios as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collArchivos !== null) {
                    foreach ($this->collArchivos as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collArchivoComentarios !== null) {
                    foreach ($this->collArchivoComentarios as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = UsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getUsuario();
                break;
            case 2:
                return $this->getClave();
                break;
            case 3:
                return $this->getCorreo();
                break;
            case 4:
                return $this->getEstado();
                break;
            case 5:
                return $this->getImagen();
                break;
            case 6:
                return $this->getAdministrador();
                break;
            case 7:
                return $this->getValidado();
                break;
            case 8:
                return $this->getUltimoIngreso();
                break;
            case 9:
                return $this->getTema();
                break;
            case 10:
                return $this->getFrase();
                break;
            case 11:
                return $this->getGenero();
                break;
            case 12:
                return $this->getFechaNacimiento();
                break;
            case 13:
                return $this->getPaisId();
                break;
            case 14:
                return $this->getCreatedAt();
                break;
            case 15:
                return $this->getUpdatedAt();
                break;
            case 16:
                return $this->getCreatedBy();
                break;
            case 17:
                return $this->getUpdatedBy();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['Usuario'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Usuario'][$this->getPrimaryKey()] = true;
        $keys = UsuarioPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getUsuario(),
            $keys[2] => $this->getClave(),
            $keys[3] => $this->getCorreo(),
            $keys[4] => $this->getEstado(),
            $keys[5] => $this->getImagen(),
            $keys[6] => $this->getAdministrador(),
            $keys[7] => $this->getValidado(),
            $keys[8] => $this->getUltimoIngreso(),
            $keys[9] => $this->getTema(),
            $keys[10] => $this->getFrase(),
            $keys[11] => $this->getGenero(),
            $keys[12] => $this->getFechaNacimiento(),
            $keys[13] => $this->getPaisId(),
            $keys[14] => $this->getCreatedAt(),
            $keys[15] => $this->getUpdatedAt(),
            $keys[16] => $this->getCreatedBy(),
            $keys[17] => $this->getUpdatedBy(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->aPais) {
                $result['Pais'] = $this->aPais->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->collMensajeCabecerasRelatedByUsuario1) {
                $result['MensajeCabecerasRelatedByUsuario1'] = $this->collMensajeCabecerasRelatedByUsuario1->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collMensajeCabecerasRelatedByUsuario2) {
                $result['MensajeCabecerasRelatedByUsuario2'] = $this->collMensajeCabecerasRelatedByUsuario2->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collMensajesRelatedByUsuarioEmisor) {
                $result['MensajesRelatedByUsuarioEmisor'] = $this->collMensajesRelatedByUsuarioEmisor->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collMensajesRelatedByUsuarioReceptor) {
                $result['MensajesRelatedByUsuarioReceptor'] = $this->collMensajesRelatedByUsuarioReceptor->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collTokenUsuarios) {
                $result['TokenUsuarios'] = $this->collTokenUsuarios->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collArchivos) {
                $result['Archivos'] = $this->collArchivos->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collArchivoComentarios) {
                $result['ArchivoComentarios'] = $this->collArchivoComentarios->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = UsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setUsuario($value);
                break;
            case 2:
                $this->setClave($value);
                break;
            case 3:
                $this->setCorreo($value);
                break;
            case 4:
                $this->setEstado($value);
                break;
            case 5:
                $this->setImagen($value);
                break;
            case 6:
                $this->setAdministrador($value);
                break;
            case 7:
                $this->setValidado($value);
                break;
            case 8:
                $this->setUltimoIngreso($value);
                break;
            case 9:
                $this->setTema($value);
                break;
            case 10:
                $this->setFrase($value);
                break;
            case 11:
                $this->setGenero($value);
                break;
            case 12:
                $this->setFechaNacimiento($value);
                break;
            case 13:
                $this->setPaisId($value);
                break;
            case 14:
                $this->setCreatedAt($value);
                break;
            case 15:
                $this->setUpdatedAt($value);
                break;
            case 16:
                $this->setCreatedBy($value);
                break;
            case 17:
                $this->setUpdatedBy($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = UsuarioPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setUsuario($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setClave($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setCorreo($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setEstado($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setImagen($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setAdministrador($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setValidado($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setUltimoIngreso($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setTema($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setFrase($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setGenero($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setFechaNacimiento($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setPaisId($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setCreatedAt($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setUpdatedAt($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setCreatedBy($arr[$keys[16]]);
        if (array_key_exists($keys[17], $arr)) $this->setUpdatedBy($arr[$keys[17]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(UsuarioPeer::DATABASE_NAME);

        if ($this->isColumnModified(UsuarioPeer::ID)) $criteria->add(UsuarioPeer::ID, $this->id);
        if ($this->isColumnModified(UsuarioPeer::USUARIO)) $criteria->add(UsuarioPeer::USUARIO, $this->usuario);
        if ($this->isColumnModified(UsuarioPeer::CLAVE)) $criteria->add(UsuarioPeer::CLAVE, $this->clave);
        if ($this->isColumnModified(UsuarioPeer::CORREO)) $criteria->add(UsuarioPeer::CORREO, $this->correo);
        if ($this->isColumnModified(UsuarioPeer::ESTADO)) $criteria->add(UsuarioPeer::ESTADO, $this->estado);
        if ($this->isColumnModified(UsuarioPeer::IMAGEN)) $criteria->add(UsuarioPeer::IMAGEN, $this->imagen);
        if ($this->isColumnModified(UsuarioPeer::ADMINISTRADOR)) $criteria->add(UsuarioPeer::ADMINISTRADOR, $this->administrador);
        if ($this->isColumnModified(UsuarioPeer::VALIDADO)) $criteria->add(UsuarioPeer::VALIDADO, $this->validado);
        if ($this->isColumnModified(UsuarioPeer::ULTIMO_INGRESO)) $criteria->add(UsuarioPeer::ULTIMO_INGRESO, $this->ultimo_ingreso);
        if ($this->isColumnModified(UsuarioPeer::TEMA)) $criteria->add(UsuarioPeer::TEMA, $this->tema);
        if ($this->isColumnModified(UsuarioPeer::FRASE)) $criteria->add(UsuarioPeer::FRASE, $this->frase);
        if ($this->isColumnModified(UsuarioPeer::GENERO)) $criteria->add(UsuarioPeer::GENERO, $this->genero);
        if ($this->isColumnModified(UsuarioPeer::FECHA_NACIMIENTO)) $criteria->add(UsuarioPeer::FECHA_NACIMIENTO, $this->fecha_nacimiento);
        if ($this->isColumnModified(UsuarioPeer::PAIS_ID)) $criteria->add(UsuarioPeer::PAIS_ID, $this->pais_id);
        if ($this->isColumnModified(UsuarioPeer::CREATED_AT)) $criteria->add(UsuarioPeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(UsuarioPeer::UPDATED_AT)) $criteria->add(UsuarioPeer::UPDATED_AT, $this->updated_at);
        if ($this->isColumnModified(UsuarioPeer::CREATED_BY)) $criteria->add(UsuarioPeer::CREATED_BY, $this->created_by);
        if ($this->isColumnModified(UsuarioPeer::UPDATED_BY)) $criteria->add(UsuarioPeer::UPDATED_BY, $this->updated_by);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
        $criteria->add(UsuarioPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of Usuario (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setUsuario($this->getUsuario());
        $copyObj->setClave($this->getClave());
        $copyObj->setCorreo($this->getCorreo());
        $copyObj->setEstado($this->getEstado());
        $copyObj->setImagen($this->getImagen());
        $copyObj->setAdministrador($this->getAdministrador());
        $copyObj->setValidado($this->getValidado());
        $copyObj->setUltimoIngreso($this->getUltimoIngreso());
        $copyObj->setTema($this->getTema());
        $copyObj->setFrase($this->getFrase());
        $copyObj->setGenero($this->getGenero());
        $copyObj->setFechaNacimiento($this->getFechaNacimiento());
        $copyObj->setPaisId($this->getPaisId());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setUpdatedAt($this->getUpdatedAt());
        $copyObj->setCreatedBy($this->getCreatedBy());
        $copyObj->setUpdatedBy($this->getUpdatedBy());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getMensajeCabecerasRelatedByUsuario1() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addMensajeCabeceraRelatedByUsuario1($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getMensajeCabecerasRelatedByUsuario2() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addMensajeCabeceraRelatedByUsuario2($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getMensajesRelatedByUsuarioEmisor() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addMensajeRelatedByUsuarioEmisor($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getMensajesRelatedByUsuarioReceptor() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addMensajeRelatedByUsuarioReceptor($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getTokenUsuarios() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addTokenUsuario($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getArchivos() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addArchivo($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getArchivoComentarios() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addArchivoComentario($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return Usuario Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return UsuarioPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new UsuarioPeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a Pais object.
     *
     * @param             Pais $v
     * @return Usuario The current object (for fluent API support)
     * @throws PropelException
     */
    public function setPais(Pais $v = null)
    {
        if ($v === null) {
            $this->setPaisId(NULL);
        } else {
            $this->setPaisId($v->getId());
        }

        $this->aPais = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Pais object, it will not be re-added.
        if ($v !== null) {
            $v->addUsuario($this);
        }


        return $this;
    }


    /**
     * Get the associated Pais object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Pais The associated Pais object.
     * @throws PropelException
     */
    public function getPais(PropelPDO $con = null)
    {
        if ($this->aPais === null && ($this->pais_id !== null)) {
            $this->aPais = PaisQuery::create()->findPk($this->pais_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aPais->addUsuarios($this);
             */
        }

        return $this->aPais;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('MensajeCabeceraRelatedByUsuario1' == $relationName) {
            $this->initMensajeCabecerasRelatedByUsuario1();
        }
        if ('MensajeCabeceraRelatedByUsuario2' == $relationName) {
            $this->initMensajeCabecerasRelatedByUsuario2();
        }
        if ('MensajeRelatedByUsuarioEmisor' == $relationName) {
            $this->initMensajesRelatedByUsuarioEmisor();
        }
        if ('MensajeRelatedByUsuarioReceptor' == $relationName) {
            $this->initMensajesRelatedByUsuarioReceptor();
        }
        if ('TokenUsuario' == $relationName) {
            $this->initTokenUsuarios();
        }
        if ('Archivo' == $relationName) {
            $this->initArchivos();
        }
        if ('ArchivoComentario' == $relationName) {
            $this->initArchivoComentarios();
        }
    }

    /**
     * Clears out the collMensajeCabecerasRelatedByUsuario1 collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addMensajeCabecerasRelatedByUsuario1()
     */
    public function clearMensajeCabecerasRelatedByUsuario1()
    {
        $this->collMensajeCabecerasRelatedByUsuario1 = null; // important to set this to null since that means it is uninitialized
        $this->collMensajeCabecerasRelatedByUsuario1Partial = null;
    }

    /**
     * reset is the collMensajeCabecerasRelatedByUsuario1 collection loaded partially
     *
     * @return void
     */
    public function resetPartialMensajeCabecerasRelatedByUsuario1($v = true)
    {
        $this->collMensajeCabecerasRelatedByUsuario1Partial = $v;
    }

    /**
     * Initializes the collMensajeCabecerasRelatedByUsuario1 collection.
     *
     * By default this just sets the collMensajeCabecerasRelatedByUsuario1 collection to an empty array (like clearcollMensajeCabecerasRelatedByUsuario1());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initMensajeCabecerasRelatedByUsuario1($overrideExisting = true)
    {
        if (null !== $this->collMensajeCabecerasRelatedByUsuario1 && !$overrideExisting) {
            return;
        }
        $this->collMensajeCabecerasRelatedByUsuario1 = new PropelObjectCollection();
        $this->collMensajeCabecerasRelatedByUsuario1->setModel('MensajeCabecera');
    }

    /**
     * Gets an array of MensajeCabecera objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|MensajeCabecera[] List of MensajeCabecera objects
     * @throws PropelException
     */
    public function getMensajeCabecerasRelatedByUsuario1($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collMensajeCabecerasRelatedByUsuario1Partial && !$this->isNew();
        if (null === $this->collMensajeCabecerasRelatedByUsuario1 || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collMensajeCabecerasRelatedByUsuario1) {
                // return empty collection
                $this->initMensajeCabecerasRelatedByUsuario1();
            } else {
                $collMensajeCabecerasRelatedByUsuario1 = MensajeCabeceraQuery::create(null, $criteria)
                    ->filterByUsuarioRelatedByUsuario1($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collMensajeCabecerasRelatedByUsuario1Partial && count($collMensajeCabecerasRelatedByUsuario1)) {
                      $this->initMensajeCabecerasRelatedByUsuario1(false);

                      foreach($collMensajeCabecerasRelatedByUsuario1 as $obj) {
                        if (false == $this->collMensajeCabecerasRelatedByUsuario1->contains($obj)) {
                          $this->collMensajeCabecerasRelatedByUsuario1->append($obj);
                        }
                      }

                      $this->collMensajeCabecerasRelatedByUsuario1Partial = true;
                    }

                    return $collMensajeCabecerasRelatedByUsuario1;
                }

                if($partial && $this->collMensajeCabecerasRelatedByUsuario1) {
                    foreach($this->collMensajeCabecerasRelatedByUsuario1 as $obj) {
                        if($obj->isNew()) {
                            $collMensajeCabecerasRelatedByUsuario1[] = $obj;
                        }
                    }
                }

                $this->collMensajeCabecerasRelatedByUsuario1 = $collMensajeCabecerasRelatedByUsuario1;
                $this->collMensajeCabecerasRelatedByUsuario1Partial = false;
            }
        }

        return $this->collMensajeCabecerasRelatedByUsuario1;
    }

    /**
     * Sets a collection of MensajeCabeceraRelatedByUsuario1 objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $mensajeCabecerasRelatedByUsuario1 A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setMensajeCabecerasRelatedByUsuario1(PropelCollection $mensajeCabecerasRelatedByUsuario1, PropelPDO $con = null)
    {
        $this->mensajeCabecerasRelatedByUsuario1ScheduledForDeletion = $this->getMensajeCabecerasRelatedByUsuario1(new Criteria(), $con)->diff($mensajeCabecerasRelatedByUsuario1);

        foreach ($this->mensajeCabecerasRelatedByUsuario1ScheduledForDeletion as $mensajeCabeceraRelatedByUsuario1Removed) {
            $mensajeCabeceraRelatedByUsuario1Removed->setUsuarioRelatedByUsuario1(null);
        }

        $this->collMensajeCabecerasRelatedByUsuario1 = null;
        foreach ($mensajeCabecerasRelatedByUsuario1 as $mensajeCabeceraRelatedByUsuario1) {
            $this->addMensajeCabeceraRelatedByUsuario1($mensajeCabeceraRelatedByUsuario1);
        }

        $this->collMensajeCabecerasRelatedByUsuario1 = $mensajeCabecerasRelatedByUsuario1;
        $this->collMensajeCabecerasRelatedByUsuario1Partial = false;
    }

    /**
     * Returns the number of related MensajeCabecera objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related MensajeCabecera objects.
     * @throws PropelException
     */
    public function countMensajeCabecerasRelatedByUsuario1(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collMensajeCabecerasRelatedByUsuario1Partial && !$this->isNew();
        if (null === $this->collMensajeCabecerasRelatedByUsuario1 || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collMensajeCabecerasRelatedByUsuario1) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getMensajeCabecerasRelatedByUsuario1());
                }
                $query = MensajeCabeceraQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuarioRelatedByUsuario1($this)
                    ->count($con);
            }
        } else {
            return count($this->collMensajeCabecerasRelatedByUsuario1);
        }
    }

    /**
     * Method called to associate a MensajeCabecera object to this object
     * through the MensajeCabecera foreign key attribute.
     *
     * @param    MensajeCabecera $l MensajeCabecera
     * @return Usuario The current object (for fluent API support)
     */
    public function addMensajeCabeceraRelatedByUsuario1(MensajeCabecera $l)
    {
        if ($this->collMensajeCabecerasRelatedByUsuario1 === null) {
            $this->initMensajeCabecerasRelatedByUsuario1();
            $this->collMensajeCabecerasRelatedByUsuario1Partial = true;
        }
        if (!$this->collMensajeCabecerasRelatedByUsuario1->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddMensajeCabeceraRelatedByUsuario1($l);
        }

        return $this;
    }

    /**
     * @param	MensajeCabeceraRelatedByUsuario1 $mensajeCabeceraRelatedByUsuario1 The mensajeCabeceraRelatedByUsuario1 object to add.
     */
    protected function doAddMensajeCabeceraRelatedByUsuario1($mensajeCabeceraRelatedByUsuario1)
    {
        $this->collMensajeCabecerasRelatedByUsuario1[]= $mensajeCabeceraRelatedByUsuario1;
        $mensajeCabeceraRelatedByUsuario1->setUsuarioRelatedByUsuario1($this);
    }

    /**
     * @param	MensajeCabeceraRelatedByUsuario1 $mensajeCabeceraRelatedByUsuario1 The mensajeCabeceraRelatedByUsuario1 object to remove.
     */
    public function removeMensajeCabeceraRelatedByUsuario1($mensajeCabeceraRelatedByUsuario1)
    {
        if ($this->getMensajeCabecerasRelatedByUsuario1()->contains($mensajeCabeceraRelatedByUsuario1)) {
            $this->collMensajeCabecerasRelatedByUsuario1->remove($this->collMensajeCabecerasRelatedByUsuario1->search($mensajeCabeceraRelatedByUsuario1));
            if (null === $this->mensajeCabecerasRelatedByUsuario1ScheduledForDeletion) {
                $this->mensajeCabecerasRelatedByUsuario1ScheduledForDeletion = clone $this->collMensajeCabecerasRelatedByUsuario1;
                $this->mensajeCabecerasRelatedByUsuario1ScheduledForDeletion->clear();
            }
            $this->mensajeCabecerasRelatedByUsuario1ScheduledForDeletion[]= $mensajeCabeceraRelatedByUsuario1;
            $mensajeCabeceraRelatedByUsuario1->setUsuarioRelatedByUsuario1(null);
        }
    }

    /**
     * Clears out the collMensajeCabecerasRelatedByUsuario2 collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addMensajeCabecerasRelatedByUsuario2()
     */
    public function clearMensajeCabecerasRelatedByUsuario2()
    {
        $this->collMensajeCabecerasRelatedByUsuario2 = null; // important to set this to null since that means it is uninitialized
        $this->collMensajeCabecerasRelatedByUsuario2Partial = null;
    }

    /**
     * reset is the collMensajeCabecerasRelatedByUsuario2 collection loaded partially
     *
     * @return void
     */
    public function resetPartialMensajeCabecerasRelatedByUsuario2($v = true)
    {
        $this->collMensajeCabecerasRelatedByUsuario2Partial = $v;
    }

    /**
     * Initializes the collMensajeCabecerasRelatedByUsuario2 collection.
     *
     * By default this just sets the collMensajeCabecerasRelatedByUsuario2 collection to an empty array (like clearcollMensajeCabecerasRelatedByUsuario2());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initMensajeCabecerasRelatedByUsuario2($overrideExisting = true)
    {
        if (null !== $this->collMensajeCabecerasRelatedByUsuario2 && !$overrideExisting) {
            return;
        }
        $this->collMensajeCabecerasRelatedByUsuario2 = new PropelObjectCollection();
        $this->collMensajeCabecerasRelatedByUsuario2->setModel('MensajeCabecera');
    }

    /**
     * Gets an array of MensajeCabecera objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|MensajeCabecera[] List of MensajeCabecera objects
     * @throws PropelException
     */
    public function getMensajeCabecerasRelatedByUsuario2($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collMensajeCabecerasRelatedByUsuario2Partial && !$this->isNew();
        if (null === $this->collMensajeCabecerasRelatedByUsuario2 || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collMensajeCabecerasRelatedByUsuario2) {
                // return empty collection
                $this->initMensajeCabecerasRelatedByUsuario2();
            } else {
                $collMensajeCabecerasRelatedByUsuario2 = MensajeCabeceraQuery::create(null, $criteria)
                    ->filterByUsuarioRelatedByUsuario2($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collMensajeCabecerasRelatedByUsuario2Partial && count($collMensajeCabecerasRelatedByUsuario2)) {
                      $this->initMensajeCabecerasRelatedByUsuario2(false);

                      foreach($collMensajeCabecerasRelatedByUsuario2 as $obj) {
                        if (false == $this->collMensajeCabecerasRelatedByUsuario2->contains($obj)) {
                          $this->collMensajeCabecerasRelatedByUsuario2->append($obj);
                        }
                      }

                      $this->collMensajeCabecerasRelatedByUsuario2Partial = true;
                    }

                    return $collMensajeCabecerasRelatedByUsuario2;
                }

                if($partial && $this->collMensajeCabecerasRelatedByUsuario2) {
                    foreach($this->collMensajeCabecerasRelatedByUsuario2 as $obj) {
                        if($obj->isNew()) {
                            $collMensajeCabecerasRelatedByUsuario2[] = $obj;
                        }
                    }
                }

                $this->collMensajeCabecerasRelatedByUsuario2 = $collMensajeCabecerasRelatedByUsuario2;
                $this->collMensajeCabecerasRelatedByUsuario2Partial = false;
            }
        }

        return $this->collMensajeCabecerasRelatedByUsuario2;
    }

    /**
     * Sets a collection of MensajeCabeceraRelatedByUsuario2 objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $mensajeCabecerasRelatedByUsuario2 A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setMensajeCabecerasRelatedByUsuario2(PropelCollection $mensajeCabecerasRelatedByUsuario2, PropelPDO $con = null)
    {
        $this->mensajeCabecerasRelatedByUsuario2ScheduledForDeletion = $this->getMensajeCabecerasRelatedByUsuario2(new Criteria(), $con)->diff($mensajeCabecerasRelatedByUsuario2);

        foreach ($this->mensajeCabecerasRelatedByUsuario2ScheduledForDeletion as $mensajeCabeceraRelatedByUsuario2Removed) {
            $mensajeCabeceraRelatedByUsuario2Removed->setUsuarioRelatedByUsuario2(null);
        }

        $this->collMensajeCabecerasRelatedByUsuario2 = null;
        foreach ($mensajeCabecerasRelatedByUsuario2 as $mensajeCabeceraRelatedByUsuario2) {
            $this->addMensajeCabeceraRelatedByUsuario2($mensajeCabeceraRelatedByUsuario2);
        }

        $this->collMensajeCabecerasRelatedByUsuario2 = $mensajeCabecerasRelatedByUsuario2;
        $this->collMensajeCabecerasRelatedByUsuario2Partial = false;
    }

    /**
     * Returns the number of related MensajeCabecera objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related MensajeCabecera objects.
     * @throws PropelException
     */
    public function countMensajeCabecerasRelatedByUsuario2(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collMensajeCabecerasRelatedByUsuario2Partial && !$this->isNew();
        if (null === $this->collMensajeCabecerasRelatedByUsuario2 || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collMensajeCabecerasRelatedByUsuario2) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getMensajeCabecerasRelatedByUsuario2());
                }
                $query = MensajeCabeceraQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuarioRelatedByUsuario2($this)
                    ->count($con);
            }
        } else {
            return count($this->collMensajeCabecerasRelatedByUsuario2);
        }
    }

    /**
     * Method called to associate a MensajeCabecera object to this object
     * through the MensajeCabecera foreign key attribute.
     *
     * @param    MensajeCabecera $l MensajeCabecera
     * @return Usuario The current object (for fluent API support)
     */
    public function addMensajeCabeceraRelatedByUsuario2(MensajeCabecera $l)
    {
        if ($this->collMensajeCabecerasRelatedByUsuario2 === null) {
            $this->initMensajeCabecerasRelatedByUsuario2();
            $this->collMensajeCabecerasRelatedByUsuario2Partial = true;
        }
        if (!$this->collMensajeCabecerasRelatedByUsuario2->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddMensajeCabeceraRelatedByUsuario2($l);
        }

        return $this;
    }

    /**
     * @param	MensajeCabeceraRelatedByUsuario2 $mensajeCabeceraRelatedByUsuario2 The mensajeCabeceraRelatedByUsuario2 object to add.
     */
    protected function doAddMensajeCabeceraRelatedByUsuario2($mensajeCabeceraRelatedByUsuario2)
    {
        $this->collMensajeCabecerasRelatedByUsuario2[]= $mensajeCabeceraRelatedByUsuario2;
        $mensajeCabeceraRelatedByUsuario2->setUsuarioRelatedByUsuario2($this);
    }

    /**
     * @param	MensajeCabeceraRelatedByUsuario2 $mensajeCabeceraRelatedByUsuario2 The mensajeCabeceraRelatedByUsuario2 object to remove.
     */
    public function removeMensajeCabeceraRelatedByUsuario2($mensajeCabeceraRelatedByUsuario2)
    {
        if ($this->getMensajeCabecerasRelatedByUsuario2()->contains($mensajeCabeceraRelatedByUsuario2)) {
            $this->collMensajeCabecerasRelatedByUsuario2->remove($this->collMensajeCabecerasRelatedByUsuario2->search($mensajeCabeceraRelatedByUsuario2));
            if (null === $this->mensajeCabecerasRelatedByUsuario2ScheduledForDeletion) {
                $this->mensajeCabecerasRelatedByUsuario2ScheduledForDeletion = clone $this->collMensajeCabecerasRelatedByUsuario2;
                $this->mensajeCabecerasRelatedByUsuario2ScheduledForDeletion->clear();
            }
            $this->mensajeCabecerasRelatedByUsuario2ScheduledForDeletion[]= $mensajeCabeceraRelatedByUsuario2;
            $mensajeCabeceraRelatedByUsuario2->setUsuarioRelatedByUsuario2(null);
        }
    }

    /**
     * Clears out the collMensajesRelatedByUsuarioEmisor collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addMensajesRelatedByUsuarioEmisor()
     */
    public function clearMensajesRelatedByUsuarioEmisor()
    {
        $this->collMensajesRelatedByUsuarioEmisor = null; // important to set this to null since that means it is uninitialized
        $this->collMensajesRelatedByUsuarioEmisorPartial = null;
    }

    /**
     * reset is the collMensajesRelatedByUsuarioEmisor collection loaded partially
     *
     * @return void
     */
    public function resetPartialMensajesRelatedByUsuarioEmisor($v = true)
    {
        $this->collMensajesRelatedByUsuarioEmisorPartial = $v;
    }

    /**
     * Initializes the collMensajesRelatedByUsuarioEmisor collection.
     *
     * By default this just sets the collMensajesRelatedByUsuarioEmisor collection to an empty array (like clearcollMensajesRelatedByUsuarioEmisor());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initMensajesRelatedByUsuarioEmisor($overrideExisting = true)
    {
        if (null !== $this->collMensajesRelatedByUsuarioEmisor && !$overrideExisting) {
            return;
        }
        $this->collMensajesRelatedByUsuarioEmisor = new PropelObjectCollection();
        $this->collMensajesRelatedByUsuarioEmisor->setModel('Mensaje');
    }

    /**
     * Gets an array of Mensaje objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Mensaje[] List of Mensaje objects
     * @throws PropelException
     */
    public function getMensajesRelatedByUsuarioEmisor($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collMensajesRelatedByUsuarioEmisorPartial && !$this->isNew();
        if (null === $this->collMensajesRelatedByUsuarioEmisor || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collMensajesRelatedByUsuarioEmisor) {
                // return empty collection
                $this->initMensajesRelatedByUsuarioEmisor();
            } else {
                $collMensajesRelatedByUsuarioEmisor = MensajeQuery::create(null, $criteria)
                    ->filterByUsuarioRelatedByUsuarioEmisor($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collMensajesRelatedByUsuarioEmisorPartial && count($collMensajesRelatedByUsuarioEmisor)) {
                      $this->initMensajesRelatedByUsuarioEmisor(false);

                      foreach($collMensajesRelatedByUsuarioEmisor as $obj) {
                        if (false == $this->collMensajesRelatedByUsuarioEmisor->contains($obj)) {
                          $this->collMensajesRelatedByUsuarioEmisor->append($obj);
                        }
                      }

                      $this->collMensajesRelatedByUsuarioEmisorPartial = true;
                    }

                    return $collMensajesRelatedByUsuarioEmisor;
                }

                if($partial && $this->collMensajesRelatedByUsuarioEmisor) {
                    foreach($this->collMensajesRelatedByUsuarioEmisor as $obj) {
                        if($obj->isNew()) {
                            $collMensajesRelatedByUsuarioEmisor[] = $obj;
                        }
                    }
                }

                $this->collMensajesRelatedByUsuarioEmisor = $collMensajesRelatedByUsuarioEmisor;
                $this->collMensajesRelatedByUsuarioEmisorPartial = false;
            }
        }

        return $this->collMensajesRelatedByUsuarioEmisor;
    }

    /**
     * Sets a collection of MensajeRelatedByUsuarioEmisor objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $mensajesRelatedByUsuarioEmisor A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setMensajesRelatedByUsuarioEmisor(PropelCollection $mensajesRelatedByUsuarioEmisor, PropelPDO $con = null)
    {
        $this->mensajesRelatedByUsuarioEmisorScheduledForDeletion = $this->getMensajesRelatedByUsuarioEmisor(new Criteria(), $con)->diff($mensajesRelatedByUsuarioEmisor);

        foreach ($this->mensajesRelatedByUsuarioEmisorScheduledForDeletion as $mensajeRelatedByUsuarioEmisorRemoved) {
            $mensajeRelatedByUsuarioEmisorRemoved->setUsuarioRelatedByUsuarioEmisor(null);
        }

        $this->collMensajesRelatedByUsuarioEmisor = null;
        foreach ($mensajesRelatedByUsuarioEmisor as $mensajeRelatedByUsuarioEmisor) {
            $this->addMensajeRelatedByUsuarioEmisor($mensajeRelatedByUsuarioEmisor);
        }

        $this->collMensajesRelatedByUsuarioEmisor = $mensajesRelatedByUsuarioEmisor;
        $this->collMensajesRelatedByUsuarioEmisorPartial = false;
    }

    /**
     * Returns the number of related Mensaje objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Mensaje objects.
     * @throws PropelException
     */
    public function countMensajesRelatedByUsuarioEmisor(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collMensajesRelatedByUsuarioEmisorPartial && !$this->isNew();
        if (null === $this->collMensajesRelatedByUsuarioEmisor || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collMensajesRelatedByUsuarioEmisor) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getMensajesRelatedByUsuarioEmisor());
                }
                $query = MensajeQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuarioRelatedByUsuarioEmisor($this)
                    ->count($con);
            }
        } else {
            return count($this->collMensajesRelatedByUsuarioEmisor);
        }
    }

    /**
     * Method called to associate a Mensaje object to this object
     * through the Mensaje foreign key attribute.
     *
     * @param    Mensaje $l Mensaje
     * @return Usuario The current object (for fluent API support)
     */
    public function addMensajeRelatedByUsuarioEmisor(Mensaje $l)
    {
        if ($this->collMensajesRelatedByUsuarioEmisor === null) {
            $this->initMensajesRelatedByUsuarioEmisor();
            $this->collMensajesRelatedByUsuarioEmisorPartial = true;
        }
        if (!$this->collMensajesRelatedByUsuarioEmisor->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddMensajeRelatedByUsuarioEmisor($l);
        }

        return $this;
    }

    /**
     * @param	MensajeRelatedByUsuarioEmisor $mensajeRelatedByUsuarioEmisor The mensajeRelatedByUsuarioEmisor object to add.
     */
    protected function doAddMensajeRelatedByUsuarioEmisor($mensajeRelatedByUsuarioEmisor)
    {
        $this->collMensajesRelatedByUsuarioEmisor[]= $mensajeRelatedByUsuarioEmisor;
        $mensajeRelatedByUsuarioEmisor->setUsuarioRelatedByUsuarioEmisor($this);
    }

    /**
     * @param	MensajeRelatedByUsuarioEmisor $mensajeRelatedByUsuarioEmisor The mensajeRelatedByUsuarioEmisor object to remove.
     */
    public function removeMensajeRelatedByUsuarioEmisor($mensajeRelatedByUsuarioEmisor)
    {
        if ($this->getMensajesRelatedByUsuarioEmisor()->contains($mensajeRelatedByUsuarioEmisor)) {
            $this->collMensajesRelatedByUsuarioEmisor->remove($this->collMensajesRelatedByUsuarioEmisor->search($mensajeRelatedByUsuarioEmisor));
            if (null === $this->mensajesRelatedByUsuarioEmisorScheduledForDeletion) {
                $this->mensajesRelatedByUsuarioEmisorScheduledForDeletion = clone $this->collMensajesRelatedByUsuarioEmisor;
                $this->mensajesRelatedByUsuarioEmisorScheduledForDeletion->clear();
            }
            $this->mensajesRelatedByUsuarioEmisorScheduledForDeletion[]= $mensajeRelatedByUsuarioEmisor;
            $mensajeRelatedByUsuarioEmisor->setUsuarioRelatedByUsuarioEmisor(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related MensajesRelatedByUsuarioEmisor from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Mensaje[] List of Mensaje objects
     */
    public function getMensajesRelatedByUsuarioEmisorJoinMensajeCabecera($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = MensajeQuery::create(null, $criteria);
        $query->joinWith('MensajeCabecera', $join_behavior);

        return $this->getMensajesRelatedByUsuarioEmisor($query, $con);
    }

    /**
     * Clears out the collMensajesRelatedByUsuarioReceptor collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addMensajesRelatedByUsuarioReceptor()
     */
    public function clearMensajesRelatedByUsuarioReceptor()
    {
        $this->collMensajesRelatedByUsuarioReceptor = null; // important to set this to null since that means it is uninitialized
        $this->collMensajesRelatedByUsuarioReceptorPartial = null;
    }

    /**
     * reset is the collMensajesRelatedByUsuarioReceptor collection loaded partially
     *
     * @return void
     */
    public function resetPartialMensajesRelatedByUsuarioReceptor($v = true)
    {
        $this->collMensajesRelatedByUsuarioReceptorPartial = $v;
    }

    /**
     * Initializes the collMensajesRelatedByUsuarioReceptor collection.
     *
     * By default this just sets the collMensajesRelatedByUsuarioReceptor collection to an empty array (like clearcollMensajesRelatedByUsuarioReceptor());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initMensajesRelatedByUsuarioReceptor($overrideExisting = true)
    {
        if (null !== $this->collMensajesRelatedByUsuarioReceptor && !$overrideExisting) {
            return;
        }
        $this->collMensajesRelatedByUsuarioReceptor = new PropelObjectCollection();
        $this->collMensajesRelatedByUsuarioReceptor->setModel('Mensaje');
    }

    /**
     * Gets an array of Mensaje objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Mensaje[] List of Mensaje objects
     * @throws PropelException
     */
    public function getMensajesRelatedByUsuarioReceptor($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collMensajesRelatedByUsuarioReceptorPartial && !$this->isNew();
        if (null === $this->collMensajesRelatedByUsuarioReceptor || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collMensajesRelatedByUsuarioReceptor) {
                // return empty collection
                $this->initMensajesRelatedByUsuarioReceptor();
            } else {
                $collMensajesRelatedByUsuarioReceptor = MensajeQuery::create(null, $criteria)
                    ->filterByUsuarioRelatedByUsuarioReceptor($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collMensajesRelatedByUsuarioReceptorPartial && count($collMensajesRelatedByUsuarioReceptor)) {
                      $this->initMensajesRelatedByUsuarioReceptor(false);

                      foreach($collMensajesRelatedByUsuarioReceptor as $obj) {
                        if (false == $this->collMensajesRelatedByUsuarioReceptor->contains($obj)) {
                          $this->collMensajesRelatedByUsuarioReceptor->append($obj);
                        }
                      }

                      $this->collMensajesRelatedByUsuarioReceptorPartial = true;
                    }

                    return $collMensajesRelatedByUsuarioReceptor;
                }

                if($partial && $this->collMensajesRelatedByUsuarioReceptor) {
                    foreach($this->collMensajesRelatedByUsuarioReceptor as $obj) {
                        if($obj->isNew()) {
                            $collMensajesRelatedByUsuarioReceptor[] = $obj;
                        }
                    }
                }

                $this->collMensajesRelatedByUsuarioReceptor = $collMensajesRelatedByUsuarioReceptor;
                $this->collMensajesRelatedByUsuarioReceptorPartial = false;
            }
        }

        return $this->collMensajesRelatedByUsuarioReceptor;
    }

    /**
     * Sets a collection of MensajeRelatedByUsuarioReceptor objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $mensajesRelatedByUsuarioReceptor A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setMensajesRelatedByUsuarioReceptor(PropelCollection $mensajesRelatedByUsuarioReceptor, PropelPDO $con = null)
    {
        $this->mensajesRelatedByUsuarioReceptorScheduledForDeletion = $this->getMensajesRelatedByUsuarioReceptor(new Criteria(), $con)->diff($mensajesRelatedByUsuarioReceptor);

        foreach ($this->mensajesRelatedByUsuarioReceptorScheduledForDeletion as $mensajeRelatedByUsuarioReceptorRemoved) {
            $mensajeRelatedByUsuarioReceptorRemoved->setUsuarioRelatedByUsuarioReceptor(null);
        }

        $this->collMensajesRelatedByUsuarioReceptor = null;
        foreach ($mensajesRelatedByUsuarioReceptor as $mensajeRelatedByUsuarioReceptor) {
            $this->addMensajeRelatedByUsuarioReceptor($mensajeRelatedByUsuarioReceptor);
        }

        $this->collMensajesRelatedByUsuarioReceptor = $mensajesRelatedByUsuarioReceptor;
        $this->collMensajesRelatedByUsuarioReceptorPartial = false;
    }

    /**
     * Returns the number of related Mensaje objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Mensaje objects.
     * @throws PropelException
     */
    public function countMensajesRelatedByUsuarioReceptor(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collMensajesRelatedByUsuarioReceptorPartial && !$this->isNew();
        if (null === $this->collMensajesRelatedByUsuarioReceptor || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collMensajesRelatedByUsuarioReceptor) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getMensajesRelatedByUsuarioReceptor());
                }
                $query = MensajeQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuarioRelatedByUsuarioReceptor($this)
                    ->count($con);
            }
        } else {
            return count($this->collMensajesRelatedByUsuarioReceptor);
        }
    }

    /**
     * Method called to associate a Mensaje object to this object
     * through the Mensaje foreign key attribute.
     *
     * @param    Mensaje $l Mensaje
     * @return Usuario The current object (for fluent API support)
     */
    public function addMensajeRelatedByUsuarioReceptor(Mensaje $l)
    {
        if ($this->collMensajesRelatedByUsuarioReceptor === null) {
            $this->initMensajesRelatedByUsuarioReceptor();
            $this->collMensajesRelatedByUsuarioReceptorPartial = true;
        }
        if (!$this->collMensajesRelatedByUsuarioReceptor->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddMensajeRelatedByUsuarioReceptor($l);
        }

        return $this;
    }

    /**
     * @param	MensajeRelatedByUsuarioReceptor $mensajeRelatedByUsuarioReceptor The mensajeRelatedByUsuarioReceptor object to add.
     */
    protected function doAddMensajeRelatedByUsuarioReceptor($mensajeRelatedByUsuarioReceptor)
    {
        $this->collMensajesRelatedByUsuarioReceptor[]= $mensajeRelatedByUsuarioReceptor;
        $mensajeRelatedByUsuarioReceptor->setUsuarioRelatedByUsuarioReceptor($this);
    }

    /**
     * @param	MensajeRelatedByUsuarioReceptor $mensajeRelatedByUsuarioReceptor The mensajeRelatedByUsuarioReceptor object to remove.
     */
    public function removeMensajeRelatedByUsuarioReceptor($mensajeRelatedByUsuarioReceptor)
    {
        if ($this->getMensajesRelatedByUsuarioReceptor()->contains($mensajeRelatedByUsuarioReceptor)) {
            $this->collMensajesRelatedByUsuarioReceptor->remove($this->collMensajesRelatedByUsuarioReceptor->search($mensajeRelatedByUsuarioReceptor));
            if (null === $this->mensajesRelatedByUsuarioReceptorScheduledForDeletion) {
                $this->mensajesRelatedByUsuarioReceptorScheduledForDeletion = clone $this->collMensajesRelatedByUsuarioReceptor;
                $this->mensajesRelatedByUsuarioReceptorScheduledForDeletion->clear();
            }
            $this->mensajesRelatedByUsuarioReceptorScheduledForDeletion[]= $mensajeRelatedByUsuarioReceptor;
            $mensajeRelatedByUsuarioReceptor->setUsuarioRelatedByUsuarioReceptor(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related MensajesRelatedByUsuarioReceptor from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Mensaje[] List of Mensaje objects
     */
    public function getMensajesRelatedByUsuarioReceptorJoinMensajeCabecera($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = MensajeQuery::create(null, $criteria);
        $query->joinWith('MensajeCabecera', $join_behavior);

        return $this->getMensajesRelatedByUsuarioReceptor($query, $con);
    }

    /**
     * Clears out the collTokenUsuarios collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addTokenUsuarios()
     */
    public function clearTokenUsuarios()
    {
        $this->collTokenUsuarios = null; // important to set this to null since that means it is uninitialized
        $this->collTokenUsuariosPartial = null;
    }

    /**
     * reset is the collTokenUsuarios collection loaded partially
     *
     * @return void
     */
    public function resetPartialTokenUsuarios($v = true)
    {
        $this->collTokenUsuariosPartial = $v;
    }

    /**
     * Initializes the collTokenUsuarios collection.
     *
     * By default this just sets the collTokenUsuarios collection to an empty array (like clearcollTokenUsuarios());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initTokenUsuarios($overrideExisting = true)
    {
        if (null !== $this->collTokenUsuarios && !$overrideExisting) {
            return;
        }
        $this->collTokenUsuarios = new PropelObjectCollection();
        $this->collTokenUsuarios->setModel('TokenUsuario');
    }

    /**
     * Gets an array of TokenUsuario objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|TokenUsuario[] List of TokenUsuario objects
     * @throws PropelException
     */
    public function getTokenUsuarios($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collTokenUsuariosPartial && !$this->isNew();
        if (null === $this->collTokenUsuarios || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collTokenUsuarios) {
                // return empty collection
                $this->initTokenUsuarios();
            } else {
                $collTokenUsuarios = TokenUsuarioQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collTokenUsuariosPartial && count($collTokenUsuarios)) {
                      $this->initTokenUsuarios(false);

                      foreach($collTokenUsuarios as $obj) {
                        if (false == $this->collTokenUsuarios->contains($obj)) {
                          $this->collTokenUsuarios->append($obj);
                        }
                      }

                      $this->collTokenUsuariosPartial = true;
                    }

                    return $collTokenUsuarios;
                }

                if($partial && $this->collTokenUsuarios) {
                    foreach($this->collTokenUsuarios as $obj) {
                        if($obj->isNew()) {
                            $collTokenUsuarios[] = $obj;
                        }
                    }
                }

                $this->collTokenUsuarios = $collTokenUsuarios;
                $this->collTokenUsuariosPartial = false;
            }
        }

        return $this->collTokenUsuarios;
    }

    /**
     * Sets a collection of TokenUsuario objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $tokenUsuarios A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setTokenUsuarios(PropelCollection $tokenUsuarios, PropelPDO $con = null)
    {
        $this->tokenUsuariosScheduledForDeletion = $this->getTokenUsuarios(new Criteria(), $con)->diff($tokenUsuarios);

        foreach ($this->tokenUsuariosScheduledForDeletion as $tokenUsuarioRemoved) {
            $tokenUsuarioRemoved->setUsuario(null);
        }

        $this->collTokenUsuarios = null;
        foreach ($tokenUsuarios as $tokenUsuario) {
            $this->addTokenUsuario($tokenUsuario);
        }

        $this->collTokenUsuarios = $tokenUsuarios;
        $this->collTokenUsuariosPartial = false;
    }

    /**
     * Returns the number of related TokenUsuario objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related TokenUsuario objects.
     * @throws PropelException
     */
    public function countTokenUsuarios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collTokenUsuariosPartial && !$this->isNew();
        if (null === $this->collTokenUsuarios || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collTokenUsuarios) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getTokenUsuarios());
                }
                $query = TokenUsuarioQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collTokenUsuarios);
        }
    }

    /**
     * Method called to associate a TokenUsuario object to this object
     * through the TokenUsuario foreign key attribute.
     *
     * @param    TokenUsuario $l TokenUsuario
     * @return Usuario The current object (for fluent API support)
     */
    public function addTokenUsuario(TokenUsuario $l)
    {
        if ($this->collTokenUsuarios === null) {
            $this->initTokenUsuarios();
            $this->collTokenUsuariosPartial = true;
        }
        if (!$this->collTokenUsuarios->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddTokenUsuario($l);
        }

        return $this;
    }

    /**
     * @param	TokenUsuario $tokenUsuario The tokenUsuario object to add.
     */
    protected function doAddTokenUsuario($tokenUsuario)
    {
        $this->collTokenUsuarios[]= $tokenUsuario;
        $tokenUsuario->setUsuario($this);
    }

    /**
     * @param	TokenUsuario $tokenUsuario The tokenUsuario object to remove.
     */
    public function removeTokenUsuario($tokenUsuario)
    {
        if ($this->getTokenUsuarios()->contains($tokenUsuario)) {
            $this->collTokenUsuarios->remove($this->collTokenUsuarios->search($tokenUsuario));
            if (null === $this->tokenUsuariosScheduledForDeletion) {
                $this->tokenUsuariosScheduledForDeletion = clone $this->collTokenUsuarios;
                $this->tokenUsuariosScheduledForDeletion->clear();
            }
            $this->tokenUsuariosScheduledForDeletion[]= $tokenUsuario;
            $tokenUsuario->setUsuario(null);
        }
    }

    /**
     * Clears out the collArchivos collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addArchivos()
     */
    public function clearArchivos()
    {
        $this->collArchivos = null; // important to set this to null since that means it is uninitialized
        $this->collArchivosPartial = null;
    }

    /**
     * reset is the collArchivos collection loaded partially
     *
     * @return void
     */
    public function resetPartialArchivos($v = true)
    {
        $this->collArchivosPartial = $v;
    }

    /**
     * Initializes the collArchivos collection.
     *
     * By default this just sets the collArchivos collection to an empty array (like clearcollArchivos());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initArchivos($overrideExisting = true)
    {
        if (null !== $this->collArchivos && !$overrideExisting) {
            return;
        }
        $this->collArchivos = new PropelObjectCollection();
        $this->collArchivos->setModel('Archivo');
    }

    /**
     * Gets an array of Archivo objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Archivo[] List of Archivo objects
     * @throws PropelException
     */
    public function getArchivos($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collArchivosPartial && !$this->isNew();
        if (null === $this->collArchivos || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collArchivos) {
                // return empty collection
                $this->initArchivos();
            } else {
                $collArchivos = ArchivoQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collArchivosPartial && count($collArchivos)) {
                      $this->initArchivos(false);

                      foreach($collArchivos as $obj) {
                        if (false == $this->collArchivos->contains($obj)) {
                          $this->collArchivos->append($obj);
                        }
                      }

                      $this->collArchivosPartial = true;
                    }

                    return $collArchivos;
                }

                if($partial && $this->collArchivos) {
                    foreach($this->collArchivos as $obj) {
                        if($obj->isNew()) {
                            $collArchivos[] = $obj;
                        }
                    }
                }

                $this->collArchivos = $collArchivos;
                $this->collArchivosPartial = false;
            }
        }

        return $this->collArchivos;
    }

    /**
     * Sets a collection of Archivo objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $archivos A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setArchivos(PropelCollection $archivos, PropelPDO $con = null)
    {
        $this->archivosScheduledForDeletion = $this->getArchivos(new Criteria(), $con)->diff($archivos);

        foreach ($this->archivosScheduledForDeletion as $archivoRemoved) {
            $archivoRemoved->setUsuario(null);
        }

        $this->collArchivos = null;
        foreach ($archivos as $archivo) {
            $this->addArchivo($archivo);
        }

        $this->collArchivos = $archivos;
        $this->collArchivosPartial = false;
    }

    /**
     * Returns the number of related Archivo objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Archivo objects.
     * @throws PropelException
     */
    public function countArchivos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collArchivosPartial && !$this->isNew();
        if (null === $this->collArchivos || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collArchivos) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getArchivos());
                }
                $query = ArchivoQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collArchivos);
        }
    }

    /**
     * Method called to associate a Archivo object to this object
     * through the Archivo foreign key attribute.
     *
     * @param    Archivo $l Archivo
     * @return Usuario The current object (for fluent API support)
     */
    public function addArchivo(Archivo $l)
    {
        if ($this->collArchivos === null) {
            $this->initArchivos();
            $this->collArchivosPartial = true;
        }
        if (!$this->collArchivos->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddArchivo($l);
        }

        return $this;
    }

    /**
     * @param	Archivo $archivo The archivo object to add.
     */
    protected function doAddArchivo($archivo)
    {
        $this->collArchivos[]= $archivo;
        $archivo->setUsuario($this);
    }

    /**
     * @param	Archivo $archivo The archivo object to remove.
     */
    public function removeArchivo($archivo)
    {
        if ($this->getArchivos()->contains($archivo)) {
            $this->collArchivos->remove($this->collArchivos->search($archivo));
            if (null === $this->archivosScheduledForDeletion) {
                $this->archivosScheduledForDeletion = clone $this->collArchivos;
                $this->archivosScheduledForDeletion->clear();
            }
            $this->archivosScheduledForDeletion[]= $archivo;
            $archivo->setUsuario(null);
        }
    }

    /**
     * Clears out the collArchivoComentarios collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addArchivoComentarios()
     */
    public function clearArchivoComentarios()
    {
        $this->collArchivoComentarios = null; // important to set this to null since that means it is uninitialized
        $this->collArchivoComentariosPartial = null;
    }

    /**
     * reset is the collArchivoComentarios collection loaded partially
     *
     * @return void
     */
    public function resetPartialArchivoComentarios($v = true)
    {
        $this->collArchivoComentariosPartial = $v;
    }

    /**
     * Initializes the collArchivoComentarios collection.
     *
     * By default this just sets the collArchivoComentarios collection to an empty array (like clearcollArchivoComentarios());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initArchivoComentarios($overrideExisting = true)
    {
        if (null !== $this->collArchivoComentarios && !$overrideExisting) {
            return;
        }
        $this->collArchivoComentarios = new PropelObjectCollection();
        $this->collArchivoComentarios->setModel('ArchivoComentario');
    }

    /**
     * Gets an array of ArchivoComentario objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|ArchivoComentario[] List of ArchivoComentario objects
     * @throws PropelException
     */
    public function getArchivoComentarios($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collArchivoComentariosPartial && !$this->isNew();
        if (null === $this->collArchivoComentarios || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collArchivoComentarios) {
                // return empty collection
                $this->initArchivoComentarios();
            } else {
                $collArchivoComentarios = ArchivoComentarioQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collArchivoComentariosPartial && count($collArchivoComentarios)) {
                      $this->initArchivoComentarios(false);

                      foreach($collArchivoComentarios as $obj) {
                        if (false == $this->collArchivoComentarios->contains($obj)) {
                          $this->collArchivoComentarios->append($obj);
                        }
                      }

                      $this->collArchivoComentariosPartial = true;
                    }

                    return $collArchivoComentarios;
                }

                if($partial && $this->collArchivoComentarios) {
                    foreach($this->collArchivoComentarios as $obj) {
                        if($obj->isNew()) {
                            $collArchivoComentarios[] = $obj;
                        }
                    }
                }

                $this->collArchivoComentarios = $collArchivoComentarios;
                $this->collArchivoComentariosPartial = false;
            }
        }

        return $this->collArchivoComentarios;
    }

    /**
     * Sets a collection of ArchivoComentario objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $archivoComentarios A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setArchivoComentarios(PropelCollection $archivoComentarios, PropelPDO $con = null)
    {
        $this->archivoComentariosScheduledForDeletion = $this->getArchivoComentarios(new Criteria(), $con)->diff($archivoComentarios);

        foreach ($this->archivoComentariosScheduledForDeletion as $archivoComentarioRemoved) {
            $archivoComentarioRemoved->setUsuario(null);
        }

        $this->collArchivoComentarios = null;
        foreach ($archivoComentarios as $archivoComentario) {
            $this->addArchivoComentario($archivoComentario);
        }

        $this->collArchivoComentarios = $archivoComentarios;
        $this->collArchivoComentariosPartial = false;
    }

    /**
     * Returns the number of related ArchivoComentario objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related ArchivoComentario objects.
     * @throws PropelException
     */
    public function countArchivoComentarios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collArchivoComentariosPartial && !$this->isNew();
        if (null === $this->collArchivoComentarios || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collArchivoComentarios) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getArchivoComentarios());
                }
                $query = ArchivoComentarioQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collArchivoComentarios);
        }
    }

    /**
     * Method called to associate a ArchivoComentario object to this object
     * through the ArchivoComentario foreign key attribute.
     *
     * @param    ArchivoComentario $l ArchivoComentario
     * @return Usuario The current object (for fluent API support)
     */
    public function addArchivoComentario(ArchivoComentario $l)
    {
        if ($this->collArchivoComentarios === null) {
            $this->initArchivoComentarios();
            $this->collArchivoComentariosPartial = true;
        }
        if (!$this->collArchivoComentarios->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddArchivoComentario($l);
        }

        return $this;
    }

    /**
     * @param	ArchivoComentario $archivoComentario The archivoComentario object to add.
     */
    protected function doAddArchivoComentario($archivoComentario)
    {
        $this->collArchivoComentarios[]= $archivoComentario;
        $archivoComentario->setUsuario($this);
    }

    /**
     * @param	ArchivoComentario $archivoComentario The archivoComentario object to remove.
     */
    public function removeArchivoComentario($archivoComentario)
    {
        if ($this->getArchivoComentarios()->contains($archivoComentario)) {
            $this->collArchivoComentarios->remove($this->collArchivoComentarios->search($archivoComentario));
            if (null === $this->archivoComentariosScheduledForDeletion) {
                $this->archivoComentariosScheduledForDeletion = clone $this->collArchivoComentarios;
                $this->archivoComentariosScheduledForDeletion->clear();
            }
            $this->archivoComentariosScheduledForDeletion[]= $archivoComentario;
            $archivoComentario->setUsuario(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related ArchivoComentarios from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|ArchivoComentario[] List of ArchivoComentario objects
     */
    public function getArchivoComentariosJoinArchivo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = ArchivoComentarioQuery::create(null, $criteria);
        $query->joinWith('Archivo', $join_behavior);

        return $this->getArchivoComentarios($query, $con);
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->usuario = null;
        $this->clave = null;
        $this->correo = null;
        $this->estado = null;
        $this->imagen = null;
        $this->administrador = null;
        $this->validado = null;
        $this->ultimo_ingreso = null;
        $this->tema = null;
        $this->frase = null;
        $this->genero = null;
        $this->fecha_nacimiento = null;
        $this->pais_id = null;
        $this->created_at = null;
        $this->updated_at = null;
        $this->created_by = null;
        $this->updated_by = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
            if ($this->collMensajeCabecerasRelatedByUsuario1) {
                foreach ($this->collMensajeCabecerasRelatedByUsuario1 as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collMensajeCabecerasRelatedByUsuario2) {
                foreach ($this->collMensajeCabecerasRelatedByUsuario2 as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collMensajesRelatedByUsuarioEmisor) {
                foreach ($this->collMensajesRelatedByUsuarioEmisor as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collMensajesRelatedByUsuarioReceptor) {
                foreach ($this->collMensajesRelatedByUsuarioReceptor as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collTokenUsuarios) {
                foreach ($this->collTokenUsuarios as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collArchivos) {
                foreach ($this->collArchivos as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collArchivoComentarios) {
                foreach ($this->collArchivoComentarios as $o) {
                    $o->clearAllReferences($deep);
                }
            }
        } // if ($deep)

        if ($this->collMensajeCabecerasRelatedByUsuario1 instanceof PropelCollection) {
            $this->collMensajeCabecerasRelatedByUsuario1->clearIterator();
        }
        $this->collMensajeCabecerasRelatedByUsuario1 = null;
        if ($this->collMensajeCabecerasRelatedByUsuario2 instanceof PropelCollection) {
            $this->collMensajeCabecerasRelatedByUsuario2->clearIterator();
        }
        $this->collMensajeCabecerasRelatedByUsuario2 = null;
        if ($this->collMensajesRelatedByUsuarioEmisor instanceof PropelCollection) {
            $this->collMensajesRelatedByUsuarioEmisor->clearIterator();
        }
        $this->collMensajesRelatedByUsuarioEmisor = null;
        if ($this->collMensajesRelatedByUsuarioReceptor instanceof PropelCollection) {
            $this->collMensajesRelatedByUsuarioReceptor->clearIterator();
        }
        $this->collMensajesRelatedByUsuarioReceptor = null;
        if ($this->collTokenUsuarios instanceof PropelCollection) {
            $this->collTokenUsuarios->clearIterator();
        }
        $this->collTokenUsuarios = null;
        if ($this->collArchivos instanceof PropelCollection) {
            $this->collArchivos->clearIterator();
        }
        $this->collArchivos = null;
        if ($this->collArchivoComentarios instanceof PropelCollection) {
            $this->collArchivoComentarios->clearIterator();
        }
        $this->collArchivoComentarios = null;
        $this->aPais = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string The value of the 'usuario' column
     */
    public function __toString()
    {
        return (string) $this->getUsuario();
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BaseUsuario:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
